C51 COMPILER V9.51   MAIN                                                                  07/27/2014 09:30:14 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN Main.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\keil\C51\BIN\C51.EXE Main.c BROWSE INCDIR(..\Library) DEBUG OBJECTEXTEND

line level    source

   1          /*---------------------------------------------------
   2                  main.c (v1.00)
   3                  
   4                  DDC-Z program, for electrocar, with ID card.
   5          ----------------------------------------------------*/
   6          
   7          //µÁ∂Ø≥µ
   8          #include "Main.h"
   9          #include "port.h"
  10          
  11          #include "AD.h"
  12          #include "voice.h"
  13          #include "pwm.h"
  14          #include "Timer.h"
  15          #include "Delay.h"
  16          #include "communication.h"
  17          #include "Battery.h"
  18          #include "Other.h"
  19          #include "operation.h"
  20          #include "UART.h"
  21                                                  
  22          /*------- Public variable declarations --------------------------*/
  23          extern tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;
  24          
  25          // ------ Private variable definitions -----------------------------
  26          bit stolen_alarm_flag = 0;                                      // when host been touch 3 times, this flag 1 before alarm voice present, no
             -t to detect sensor for 1st voice alarm.
  27          bit position_sensor_EN=0;               //Œª÷√¥´∏–∆˜£¨º¥µπµÿÃß∆¥´∏–∆˜◊‹ø™πÿ£¨1µƒ ±∫Ú£¨ºÏ≤‚’‚¡Ω∏ˆ¥´∏–∆˜
  28          bit host_stolen_alarm1_EN = 0;      //≈–∂œŒ™±ªµ¡±®æØ∫Ûµƒµ⁄“ª∂Œ”Ô“Ù πƒ‹
  29          bit host_stolen_alarm2_EN = 0;      //≈–∂œŒ™±ªµ¡±®æØ∫Ûµƒµ⁄∂˛∂Œ”Ô“Ù πƒ‹
  30          tByte host_stolen_alarm1_count = 0;             //≈–∂œŒ™±ªµ¡±®æØ∫Ûµƒµ⁄“ª∂Œ”Ô“Ù¥Œ ˝
  31          tByte host_stolen_alarm2_count = 0;             //≈–∂œŒ™±ªµ¡±®æØ∫Ûµƒµ⁄∂˛∂Œ”Ô“Ù¥Œ ˝
  32          bit fell_flag=0;                                                //≈–∂œ÷˜ª˙µπœ¬∫Û£¨÷√1
  33          bit raised_flag=0;                                      //≈–∂œ÷˜ª˙±ªÃß∆∫Û£¨÷√1
  34          tByte sensor_2ndstage_count = 0;                //¥´∏–∆˜Ω¯»Îµ⁄∂˛Ω◊∂ŒºÏ≤‚ ±£¨º∆À„µÕµÁ∆Ωµƒ ±º‰
  35          tWord sensor_3rdstage_time = 0;                 //¥´∏–∆˜Ω¯»Îµ⁄»˝Ω◊∂Œµƒ ±º‰£¨
  36          tByte sensor_3rdstage_effcount = 0;             //¥´∏–∆˜Ω¯»Îµ⁄»˝Ω◊∂Œ∫Û£¨”––ß¥•≈ˆ¥Œ ˝µƒº∆ ˝
  37          tByte sensor_3rdstage_count = 0;                        //¥´∏–∆˜Ω¯»Îµ⁄»˝Ω◊∂Œ∫Û£¨µÕµÁ∆Ωµƒº∆ ˝
  38          tWord sensor_3rdstage_interval = 0;             //¥´∏–∆˜‘⁄µ⁄»˝Ω◊∂Œ÷–£¨√ø¥Œ”––ßµÕµÁ∆Ωº∆ ˝÷Æº‰µƒ ±º‰º‰∏Ù°£‘⁄’‚∆⁄º‰µƒµÕµ
             -Á∆Ω≤ª»œŒ™”––ß°£
  39          bit raised_fell_flag = 0;                                       //µπµÿªÚ’ﬂÃß∆¥•∑¢∫Û£¨¥À±Í÷æŒª÷√1
  40          tByte sensor_trigger_count=0;           //¥´∏–∆˜¥•∑¢º∆ ˝
  41          tWord sensor_2ndstage_time=0;           //¥´∏–∆˜Ω¯»Îµ⁄∂˛Ω◊∂Œ∫Û¡˜ ≈ ±º‰µƒº∆ ˝
  42          tByte sensor_1ststage_count=0;  //¥´∏–∆˜µ⁄“ªΩ◊∂Œ≈–∂œµÕµÁ∆Ωµƒº∆ ˝
  43          tByte nearby_away_interval = 0;         //∏Ωª˙¿Îø™∫ÕøøΩ¸ ±£¨”Ô“ÙÃ· æ∫Õø™πÿÀ¯µƒ ±º‰º‰∏Ù
  44          
  45          tByte raised_alarm_count = 0;    //÷˜ª˙±ªÃß∆∫Û£¨œÚ∏Ωª˙∑¢≥ˆ±®æØ–≈∫≈µƒ¥Œ ˝
  46          tByte fell_alarm_count=0;        //÷˜ª˙µπµÿ∫Û£¨œÚ∏Ωª˙∑¢≥ˆ±®æØ–≈∫≈µƒ¥Œ ˝
  47          tWord timer0_count=0;           // counter for timer0, increment every ticket                   
  48          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};             //Ω” ’ ˝æ›ª∫¥Ê
  49          bit receive_data_finished_flag = 0;             //Ω” ’’‚“ª¥Æ ˝æ›ÕÍ≥…∫Û£¨¥À±Í÷æŒª÷√1
  50          tByte data_count = 0;                           //Ω” ’ ˝æ›ª∫¥ÊµƒŒª ˝£¨º¥±Ì√˜µ⁄º∏∏ˆª∫¥Ê ˝æ›
  51          tByte one_receive_byte = 0;             //Ω” ’ ˝æ›µƒ“ª∏ˆ◊÷Ω⁄£¨Ω” ’ÕÍ∫ÛΩ´∆‰∏≥÷µ∏¯received_data_bufferœ‡∂‘”¶µƒ◊÷Ω⁄
  52          tByte one_receive_byte_count = 0;                       //one_receive_byte”–8Œª£¨¥Àº∆ ˝±Ì√˜Ω” ’µΩµ⁄º∏Œª£¨√ø¥Œº∆ ˝µΩ8µƒ ±∫Ú±Ì√˜
             -“ª∏ˆ◊÷Ω⁄Ω” ’ÕÍ≥…°£
C51 COMPILER V9.51   MAIN                                                                  07/27/2014 09:30:14 PAGE 2   

  53          bit receive_wire_flag = 1;              //Ω” ’Õ®–≈œﬂµƒ±Í÷æŒª£¨1±Ì√˜∏ﬂµÁ∆Ω£¨0±Ì√˜µÕµÁ∆Ω£¨√ø¥Œtimer1“Á≥ˆ ±£¨≈–∂œP1.1“ª¥Œ
             -°£“‘¥À¿¥±Ì√˜ «∑ÒŒ™“ª¥Œ’˝»∑µƒœ¬Ωµ—ÿ
  54          tByte receive_HV_count = 0;             //∂® ±∆˜T1‘⁄√ª”––≈∫≈µΩ¿¥µƒ ±∫Ú£¨∂‘∏ﬂµÁ∆Ωº∆ ˝£¨“ªµ©≥¨π˝ƒ≥∏ˆ÷µ£¨‘ÚΩ´one_receive
             -_byte_count«Â0
  55          tByte receive_LV_count = 0;             //√ø¥Œtimer1“Á≥ˆ ±≈–∂œΩ” ’œﬂ»Áπ˚Œ™LV£¨‘Úº∆ ˝º”1£¨“‘¥À¿¥±Ì√˜µÕµÁ∆Ωµƒ ±º‰
  56          tByte fell_wire_time=0;          //µπµÿºÏ≤‚œﬂ£¨ºÏ≤‚µÕµÁ∆Ωµƒ ±º‰
  57          tByte raise_wire_time=0;                        //Ãß∆ºÏ≤‚œﬂ£¨ºÏ≤‚µÕµÁ∆Ωµƒ ±º‰
  58          tWord raised_fell_number = 0;                           //µπµÿªÚ’ﬂÃß∆≥ˆ∑¢∫Û£¨º∆ ˝£¨µΩ¥Ô“ª∂® ˝÷µ∫Û£¨Ω´∆‰”Î±Í÷æŒª“ª∆«Â¡„°£
  59          bit raised_fell_once_flag = 0;                  //raised_fell_flag «∑Ò‘¯æ≠±Í÷æπ˝£¨»Áπ˚±Í÷æπ˝‘Ú÷√1.»ª∫Û÷˜ª˙±ªª÷∏¥µπµÿªÚ’ﬂª
             -÷∏¥Ãß∆ ±£¨¥À±Í÷æŒª∏¥Œª°£
  60          tByte key_rotated_on_flag=0;                    //µÁ∂Ø≥µø™∆Ùπÿ±’±Í÷æŒª£¨1±Ì æµÁ∂Ø≥µø™∆Ù¡À£¨0±Ì æµÁ∂Ø≥µπÿ±’¡À
  61          tWord ADC_check_result = 0;             //◊˜Œ™ADºÏ≤‚÷µ
  62          tByte wire_broken_count = 0;            // ◊˜Œ™∂œœﬂ∫Ûµƒ ±º‰ºÏ≤‚
  63          bit battery_stolen_EN = 0;                      // ◊˜Œ™µÁ≥ÿ±ªµ¡µƒ πƒ‹∂À
  64          tByte battery_stolen_count = 0; // ◊˜Œ™µÁ≥ÿ±ªµ¡µƒ±®æØ¥Œ ˝
  65          bit horizontal_vibration = 0;           // ±Ì æ¥π÷±¥´∏–∆˜‘⁄’Ò∂Ø£¨¥À ±æÕÀ„πÿ‘ø≥◊£¨“≤≤ªƒ‹÷¥––πÿ‘ø≥◊µƒ≤Ÿ◊˜°
  66          tWord horizontal_vibration_count = 0;   //¥π÷±¥´∏–∆˜¥•∑¢∫Û£¨∂‘ ±º‰Ω¯––º∆ ˝°£
  67          bit vibration_flag = 0;
  68          tWord vibration_count = 0;
  69          bit wire_broken_flag = 0;                       // ºÙ∂œÀ¯œﬂµƒ±Í÷æŒª
  70          tByte IDkey5 = IDkey0^IDkey1^IDkey2^IDkey3^IDkey4;              // ”…«∞5Œª√‹¬Î◊È≥…µƒ“ÏªÚ
  71          bit IDkey_flag = 0;                     // µ±IDø®øøΩ¸ ±»œ÷§Õ®π˝∫Û÷√1£¨
  72          tByte IDkey_count = 0;          // IDø®»œ÷§Õ®π˝∫Û£¨º∆ ±1∑÷÷”£¨ π‘ø≥◊ƒ‹◊™∂Ø°£
  73          bit sensor_EN = 0;
  74          tByte enable_sensor_delay_count = 0;            // ¥´∏–∆˜—”≥Ÿµƒ ±º‰
  75          bit sensor_3rdalarm_flag = 0;
  76          bit wheeled_flag = 0;
  77          tWord wheeled_count = 0;
  78          
  79          bit test_flag = 0;              // …Ë÷√≤‚ ‘ø™ ºµƒ±Í÷æŒª
  80          
  81          /*------- Private variable declarations --------------------------*/
  82          
  83          void main()
  84                  {
  85   1              ADC_check_result = 0x3FF;
  86   1              
  87   1              // initialize the magnet, 
  88   1              MagentControl_1 = 1;
  89   1              MagentControl_2 = 1;
  90   1              wire_broken = 1;
  91   1              
  92   1              InitUART();
  93   1              InitT0(1);
  94   1              
  95   1              TI = 0;
  96   1              RI = 0;
  97   1              ES = 1;
  98   1              ET0 = 1;
  99   1              PS = 1;
 100   1              EA = 1;
 101   1      
 102   1              P10=1;
 103   1                      
 104   1              
 105   1              // ≥ı ºªØÕÍ±œ∫Û£¨ø™ º≤‚ ‘≥Ã–Ú
 106   1              test_flag = 1;
 107   1              
 108   1                      
 109   1              while(1)
 110   1                      {        
 111   2                      sEOS_Go_To_Sleep();
C51 COMPILER V9.51   MAIN                                                                  07/27/2014 09:30:14 PAGE 3   

 112   2                      }
 113   1              }
 114          
 115          /*------------------------------------------------------------------
 116                  timerT0()
 117                  operation every ticket.
 118          --------------------------------------------------------------------*/
 119          
 120          void timer0() interrupt interrupt_timer_0_overflow
 121                  {
 122   1              // manually reload timer0 configuration
 123   1              TH0 = timer0_8H;
 124   1              TL0 = timer0_8L;
 125   1              
 126   1              // timer0 is 1ms ticket, count the time flow of timer0, then operate every 2s.
 127   1              if(++timer0_count >= 10000)
 128   1                      {
 129   2                      // reset timer0 ticket counter every 2s
 130   2                      timer0_count=0;
 131   2                      
 132   2                      if(test_flag == 1)
 133   2                              {
 134   3                              // ø™À¯
 135   3                              magnet_CW();
 136   3                              Delay(40);
 137   3      
 138   3                              // ∑¢±®æØ–≈∫≈≥ˆ»•
 139   3                              ComMode_3_Data();
 140   3      
 141   3                              // √ø∏Ù3s≤•∑≈”Ô“Ù£¨≤‚ ‘“Ù∆µ–≈∫≈
 142   3                              Product_Test_Voice();
 143   3      
 144   3                              // ºÏ≤‚ADCµƒµÁ—π÷µ
 145   3                              ADC_check_result = GetADCResult(6);     
 146   3                              
 147   3                              // ∑¢±®æØ–≈∫≈≥ˆ»•
 148   3                              ComMode_3_Data();
 149   3                              
 150   3                              // ≤•±®µÁ¡ø÷µ
 151   3                              verifybattery(ADC_check_result);                                        
 152   3      
 153   3                              Delay(40);
 154   3                              // πÿÀ¯
 155   3                              magnet_ACW();
 156   3                              Delay(40);
 157   3                              // ∑¢±®æØ–≈∫≈≥ˆ»•
 158   3                              ComMode_3_Data();
 159   3                              }
 160   2                      }
 161   1      
 162   1              
 163   1              // ºÏ≤‚ID»œ÷§Õ®π˝£¨Õ¨ ±‘ø≥◊¥Úø™∫Ûµƒ≤Ÿ◊˜£¨≤•±®”Ô“Ù°£
 164   1              if((key_rotate == 1)&&(key_rotated_on_flag == 0)&&(IDkey_flag == 1))            
 165   1                      {                                                                        
 166   2                      Delay(5);
 167   2                      // anti-trigger, Delay(5) confirm the key rotation.
 168   2                      if(key_rotate == 1)
 169   2                              {
 170   3                  // speech for slave nearby
 171   3                              slave_nearby_speech();
 172   3      
 173   3                              key_rotated_on_flag = 1;
C51 COMPILER V9.51   MAIN                                                                  07/27/2014 09:30:14 PAGE 4   

 174   3                              
 175   3                              IDkey_count = 0;
 176   3                              IDkey_flag = 0;                         
 177   3                              }
 178   2                      }
 179   1                      
 180   1              // πÿ‘ø≥◊µƒ≤Ÿ◊˜£¨ºÏ≤‚ «∑Ò”–¬÷◊”‘⁄◊™∂Ø
 181   1              if((key_rotate == 0)&&(key_rotated_on_flag == 1))
 182   1                      {
 183   2                      if((vibration_flag == 0)&&(wheeled_flag == 0))
 184   2                              {
 185   3                              Delay(5);
 186   3                              if(key_rotate == 0)
 187   3                                      {
 188   4                                      // reset key rotation flag
 189   4                                      key_rotated_on_flag=0;
 190   4                                      
 191   4                                      slave_away_speech();    
 192   4                                      }                               
 193   3                              }
 194   2                      }
 195   1      
 196   1      
 197   1              // ≤‚ ‘¬÷◊”‘⁄◊™∂Øµƒ ±∫Ú£¨≤ªƒ‹πÿÀ¯
 198   1              if(wheeled_rotate == 1)
 199   1                      {
 200   2                      wheeled_flag = 1;
 201   2                      wheeled_count = 0;
 202   2                      }
 203   1              if(wheeled_flag == 1)
 204   1                      {
 205   2                      if(++wheeled_count >= 2000)
 206   2                              {
 207   3                              wheeled_flag = 0;
 208   3                              wheeled_count = 0;
 209   3                  }
 210   2                      }
 211   1      
 212   1              // ≤‚ ‘’Ò∂Ø¥´∏–∆˜
 213   1              if((sensor_detect == 0)||(horizontal_sensor == 0))
 214   1                      {
 215   2                      if(++sensor_1ststage_count >= 2)                        
 216   2                              {
 217   3                              sensor_1ststage_count=0;
 218   3                              
 219   3                              host_touch_speech();
 220   3                              }
 221   2                      }
 222   1                                                                      
 223   1              // ƒ√µÙÀ¯£¨ƒ£ƒ‚”–»ÀºÙ∂œÀ¯œﬂ£¨≤•±®”Ô“Ù
 224   1              if(wire_broken == 0) 
 225   1                      {
 226   2                      battery_stolen_speech();
 227   2                      }
 228   1      
 229   1              // ≤‚ ‘ÀÆ“¯ø™πÿ£¨µπµÿªÚ’ﬂÃß∆∫Û£¨≤•±®”Ô“Ù°£
 230   1              if((raised_sensor_detect == 0)||(fell_sensor_detect == 0))
 231   1                      {
 232   2                      stolen_alarm_speech2();
 233   2                      }
 234   1      
 235   1      /*                      
C51 COMPILER V9.51   MAIN                                                                  07/27/2014 09:30:14 PAGE 5   

 236   1              // ≤‚ ‘‘⁄”–µÁ∆Ωµƒ«Èøˆœ¬£¨ƒ√µÙ48VµÁ‘¥£¨ƒ£ƒ‚”–»ÀÕµµÁ∆øµƒ«Èøˆ£¨≤•±®”Ô“Ù
 237   1              if(ADC_check_result < 0x2c1)
 238   1                      {
 239   1                      battery_stolen_speech();
 240   1                      }
 241   1      */
 242   1              }
 243          
 244          
 245          /*-----------------------------------------------
 246                  ”√UART∂Àø⁄Ω” ’ ˝æ›£¨9600≤®Ãÿ¬ £¨ ’µΩ∫Û±Ì æ
 247                  »œ÷§“—Õ®π˝°£
 248          -----------------------------------------------*/
 249          void uart_isr() interrupt 4 //÷–∂œΩ” ’ ˝æ›
 250                  {
 251   1              if(RI)
 252   1                      {
 253   2                      RI=0;
 254   2      
 255   2                      // assign one byte to buffer[i] 
 256   2                      received_data_buffer[data_count] = SBUF;
 257   2                      
 258   2                      // judge whether buffer[0] is CmdHead
 259   2                      if((data_count == 0) && (received_data_buffer[0] == IDkey0))
 260   2                              {
 261   3                              data_count = 1;
 262   3                              }
 263   2                      else if((data_count == 1) && (received_data_buffer[1] == IDkey1))
 264   2                              {
 265   3                              data_count = 2;
 266   3                              }
 267   2                      else if((data_count == 2) && (received_data_buffer[2] == IDkey2))
 268   2                              {
 269   3                              data_count = 3;
 270   3                              }
 271   2                      else if((data_count == 3) && (received_data_buffer[3] == IDkey3))
 272   2                              {
 273   3                              data_count = 4;
 274   3                              }
 275   2                      else if((data_count == 4) && (received_data_buffer[4] == IDkey4))
 276   2                              {
 277   3                              data_count = 5;
 278   3                              }
 279   2                      else if((data_count == 5) && (received_data_buffer[5] == IDkey5))
 280   2                              {
 281   3                              data_count = 0; 
 282   3                              IDkey_flag = 1;
 283   3                              IDkey_count = 0;
 284   3                              disable_sensor();
 285   3                              }
 286   2                      else 
 287   2                              {
 288   3                              data_count = 0;
 289   3                              }
 290   2                      }
 291   1              }
 292          
 293          
 294          /*---------------------------------------------------
 295                  end of file
 296          ----------------------------------------------------*/

C51 COMPILER V9.51   MAIN                                                                  07/27/2014 09:30:14 PAGE 6   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    484    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     48    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     19    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
