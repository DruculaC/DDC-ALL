C51 COMPILER V9.51   MAIN                                                                  09/10/2014 14:03:49 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN Main.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\keil\C51\BIN\C51.EXE Main.c BROWSE INCDIR(..\Library) DEBUG OBJECTEXTEND

line level    source

   1          /*---------------------------------------------------
   2                  main.c (v1.00)
   3                  
   4                  DDC-Z program, for electrocar, with ID card.
   5          ----------------------------------------------------*/
   6          
   7          //µç¶¯³µ
   8          #include "Main.h"
   9          #include "port.h"
  10          
  11          #include "AD.h"
  12          #include "voice.h"
  13          #include "pwm.h"
  14          #include "Timer.h"
  15          #include "Delay.h"
  16          #include "communication.h"
  17          #include "Battery.h"
  18          #include "Other.h"
  19          #include "operation.h"
  20          #include "UART.h"
  21                                                  
  22          /*------- Public variable declarations --------------------------*/
  23          extern tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;
  24          extern bit enable_sensor_delayEN;
  25          
  26          // ------ Private variable definitions -----------------------------
  27          bit stolen_alarm_flag = 0;                                      // when host been touch 3 times, this flag 1 before alarm voice present, no
             -t to detect sensor for 1st voice alarm.
  28          bit position_sensor_EN=0;               //Î»ÖÃ´«¸ĞÆ÷£¬¼´µ¹µØÌ§Æğ´«¸ĞÆ÷×Ü¿ª¹Ø£¬1µÄÊ±ºò£¬¼ì²âÕâÁ½¸ö´«¸ĞÆ÷
  29          bit host_stolen_alarm1_EN = 0;      //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒôÊ¹ÄÜ
  30          bit host_stolen_alarm2_EN = 0;      //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶ş¶ÎÓïÒôÊ¹ÄÜ
  31          tByte host_stolen_alarm1_count = 0;             //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒô´ÎÊı
  32          tByte host_stolen_alarm2_count = 0;             //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶ş¶ÎÓïÒô´ÎÊı
  33          bit fell_flag=0;                                                //ÅĞ¶ÏÖ÷»úµ¹ÏÂºó£¬ÖÃ1
  34          bit raised_flag=0;                                      //ÅĞ¶ÏÖ÷»ú±»Ì§Æğºó£¬ÖÃ1
  35          tByte sensor_2ndstage_count = 0;                //´«¸ĞÆ÷½øÈëµÚ¶ş½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  36          tWord sensor_3rdstage_time = 0;                 //´«¸ĞÆ÷½øÈëµÚÈı½×¶ÎµÄÊ±¼ä£¬
  37          tByte sensor_3rdstage_effcount = 0;             //´«¸ĞÆ÷½øÈëµÚÈı½×¶Îºó£¬ÓĞĞ§´¥Åö´ÎÊıµÄ¼ÆÊı
  38          tByte sensor_3rdstage_count = 0;                        //´«¸ĞÆ÷½øÈëµÚÈı½×¶Îºó£¬µÍµçÆ½µÄ¼ÆÊı
  39          tWord sensor_3rdstage_interval = 0;             //´«¸ĞÆ÷ÔÚµÚÈı½×¶ÎÖĞ£¬Ã¿´ÎÓĞĞ§µÍµçÆ½¼ÆÊıÖ®¼äµÄÊ±¼ä¼ä¸ô¡£ÔÚÕâÆÚ¼äµÄµÍµ
             -çÆ½²»ÈÏÎªÓĞĞ§¡£
  40          bit raised_fell_flag = 0;                                       //µ¹µØ»òÕßÌ§Æğ´¥·¢ºó£¬´Ë±êÖ¾Î»ÖÃ1
  41          tByte sensor_trigger_count=0;           //´«¸ĞÆ÷´¥·¢¼ÆÊı
  42          tWord sensor_2ndstage_time=0;           //´«¸ĞÆ÷½øÈëµÚ¶ş½×¶ÎºóÁ÷ÊÅÊ±¼äµÄ¼ÆÊı
  43          tByte sensor_1ststage_count=0;  //´«¸ĞÆ÷µÚÒ»½×¶ÎÅĞ¶ÏµÍµçÆ½µÄ¼ÆÊı
  44          
  45          tByte raised_alarm_count = 0;    //Ö÷»ú±»Ì§Æğºó£¬Ïò¸½»ú·¢³ö±¨¾¯ĞÅºÅµÄ´ÎÊı
  46          tByte fell_alarm_count=0;        //Ö÷»úµ¹µØºó£¬Ïò¸½»ú·¢³ö±¨¾¯ĞÅºÅµÄ´ÎÊı
  47          tWord timer0_count=0;           // counter for timer0, increment every ticket                   
  48          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};             //½ÓÊÕÊı¾İ»º´æ
  49          bit receive_data_finished_flag = 0;             //½ÓÊÕÕâÒ»´®Êı¾İÍê³Éºó£¬´Ë±êÖ¾Î»ÖÃ1
  50          tByte data_count = 0;                           //½ÓÊÕÊı¾İ»º´æµÄÎ»Êı£¬¼´±íÃ÷µÚ¼¸¸ö»º´æÊı¾İ
  51          tByte one_receive_byte = 0;             //½ÓÊÕÊı¾İµÄÒ»¸ö×Ö½Ú£¬½ÓÊÕÍêºó½«Æä¸³Öµ¸øreceived_data_bufferÏà¶ÔÓ¦µÄ×Ö½Ú
  52          tByte one_receive_byte_count = 0;                       //one_receive_byteÓĞ8Î»£¬´Ë¼ÆÊı±íÃ÷½ÓÊÕµ½µÚ¼¸Î»£¬Ã¿´Î¼ÆÊıµ½8µÄÊ±ºò±íÃ÷
             -Ò»¸ö×Ö½Ú½ÓÊÕÍê³É¡£
C51 COMPILER V9.51   MAIN                                                                  09/10/2014 14:03:49 PAGE 2   

  53          bit receive_wire_flag = 1;              //½ÓÊÕÍ¨ĞÅÏßµÄ±êÖ¾Î»£¬1±íÃ÷¸ßµçÆ½£¬0±íÃ÷µÍµçÆ½£¬Ã¿´Îtimer1Òç³öÊ±£¬ÅĞ¶ÏP1.1Ò»´Î
             -¡£ÒÔ´ËÀ´±íÃ÷ÊÇ·ñÎªÒ»´ÎÕıÈ·µÄÏÂ½µÑØ
  54          tByte receive_HV_count = 0;             //¶¨Ê±Æ÷T1ÔÚÃ»ÓĞĞÅºÅµ½À´µÄÊ±ºò£¬¶Ô¸ßµçÆ½¼ÆÊı£¬Ò»µ©³¬¹ıÄ³¸öÖµ£¬Ôò½«one_receive
             -_byte_countÇå0
  55          tByte receive_LV_count = 0;             //Ã¿´Îtimer1Òç³öÊ±ÅĞ¶Ï½ÓÊÕÏßÈç¹ûÎªLV£¬Ôò¼ÆÊı¼Ó1£¬ÒÔ´ËÀ´±íÃ÷µÍµçÆ½µÄÊ±¼ä
  56          tByte fell_wire_time=0;          //µ¹µØ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  57          tByte raise_wire_time=0;                        //Ì§Æğ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  58          tWord raised_fell_number = 0;                           //µ¹µØ»òÕßÌ§Æğ³ö·¢ºó£¬¼ÆÊı£¬µ½´ïÒ»¶¨ÊıÖµºó£¬½«ÆäÓë±êÖ¾Î»Ò»ÆğÇåÁã¡£
  59          bit raised_fell_once_flag = 0;                  //raised_fell_flagÊÇ·ñÔø¾­±êÖ¾¹ı£¬Èç¹û±êÖ¾¹ıÔòÖÃ1.È»ºóÖ÷»ú±»»Ö¸´µ¹µØ»òÕß»
             -Ö¸´Ì§ÆğÊ±£¬´Ë±êÖ¾Î»¸´Î»¡£
  60          tByte key_rotated_on_flag = 1;                  //µç¶¯³µ¿ªÆô¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  61          tByte key_rotated_off_flag=0;                   //µç¶¯³µ¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  62          tWord ADC_check_result = 0;             //×÷ÎªAD¼ì²âÖµ
  63          tByte wire_broken_count = 0;            // ×÷Îª¶ÏÏßºóµÄÊ±¼ä¼ì²â
  64          bit battery_stolen_EN = 0;                      // ×÷Îªµç³Ø±»µÁµÄÊ¹ÄÜ¶Ë
  65          tByte battery_stolen_count = 0; // ×÷Îªµç³Ø±»µÁµÄ±¨¾¯´ÎÊı
  66          bit horizontal_vibration = 0;           // ±íÊ¾´¹Ö±´«¸ĞÆ÷ÔÚÕñ¶¯£¬´ËÊ±¾ÍËã¹ØÔ¿³×£¬Ò²²»ÄÜÖ´ĞĞ¹ØÔ¿³×µÄ²Ù×÷¡
  67          tWord horizontal_vibration_count = 0;   //´¹Ö±´«¸ĞÆ÷´¥·¢ºó£¬¶ÔÊ±¼ä½øĞĞ¼ÆÊı¡£
  68          bit vibration_flag = 0;
  69          tWord vibration_count = 0;
  70          bit wire_broken_flag = 0;                       // ¼ô¶ÏËøÏßµÄ±êÖ¾Î»
  71          tByte IDkey5 = IDkey0^IDkey1^IDkey2^IDkey3^IDkey4;              // ÓÉÇ°5Î»ÃÜÂë×é³ÉµÄÒì»ò
  72          bit IDkey_flag = 0;                     // µ±ID¿¨¿¿½üÊ±ÈÏÖ¤Í¨¹ıºóÖÃ1£¬
  73          tByte IDkey_count = 0;          // ID¿¨ÈÏÖ¤Í¨¹ıºó£¬¼ÆÊ±1·ÖÖÓ£¬Ê¹Ô¿³×ÄÜ×ª¶¯¡£
  74          bit sensor_EN = 0;
  75          tByte enable_sensor_delay_count = 0;            // ´«¸ĞÆ÷ÑÓ³ÙµÄÊ±¼ä
  76          bit sensor_3rdalarm_flag = 0;
  77          bit wheeled_flag = 0;
  78          tWord wheeled_count = 0;
  79          tByte key_rotate_count = 0;
  80          bit key_rotate_flag = 0;
  81          bit lock_rotate_on_flag = 1;
  82          bit lock_rotate_off_flag = 0;
  83          bit slave_away_flag = 1;
  84          bit Auto_Mode = 1;              //×Ô¶¯¿ª¹ØËøÄ£Ê½´ò¿ª£¬Ã¿´ÎÊÕµ½ComMode_8Ê±£¬ÊÖ¶¯ºÍ×Ô¶¯ÇĞ»»
  85          
  86          
  87          void main()
  88                  {
  89   1      
  90   1      /*      InitUART();
  91   1              InitT0(1);
  92   1              
  93   1              TI = 0;
  94   1              RI = 0;
  95   1              ES = 1;
  96   1              ET0 = 1;
  97   1              PS = 1;
  98   1              EA = 1;
  99   1      */
 100   1              
 101   1              InitTimer(1,100);
 102   1              
 103   1              sensor_EN = 0;
 104   1              position_sensor_EN = 0;
 105   1      
 106   1              noVoice();
 107   1      
 108   1              voice_EN=0;             //½«¹¦·Å¹Ø±Õ
 109   1      
 110   1              raised_sensor_detect=1;
 111   1              fell_sensor_detect=1;
C51 COMPILER V9.51   MAIN                                                                  09/10/2014 14:03:49 PAGE 3   

 112   1      
 113   1              P10=1;
 114   1              
 115   1          horizontal_sensor = 1;
 116   1              // open communication
 117   1              
 118   1              // turn off transmitter, turn on receiver
 119   1              transmiter_EN = 1;
 120   1              receiver_EN = 1;
 121   1      
 122   1              
 123   1              // initialize the magnet, 
 124   1              MagentControl_1 = 1;
 125   1              MagentControl_2 = 1;
 126   1      
 127   1              transmiter_power = 1; 
 128   1         
 129   1              wire_broken = 1;
 130   1              TR0 = 1;
 131   1              
 132   1              // lock the external motor, ·ÀÖ¹Ëø»¹Ã»ÍêÈ«´ò¿ªµÄÊ±ºò£¬³µÊÖ¼Óµçµ¼ÖÂÂÖ×ÓÓëËøµÄ¸æËßÅö×²¡£ 
 133   1              motor_lock = 1;
 134   1      
 135   1              while(1)
 136   1                      {        
 137   2                      
 138   2                      // ÅĞ¶Ï´«¸ĞÆ÷ÊÇ·ñÔÚÕñ¶¯
 139   2                      if((sensor_detect == 0)||(horizontal_sensor == 0))
 140   2                              {
 141   3                              vibration_flag = 1;
 142   3                              vibration_count = 0;                    
 143   3                              }               
 144   2                      }
 145   1              }
 146          
 147          /*------------------------------------------------------------------
 148                  timerT0()
 149                  operation every ticket.
 150          --------------------------------------------------------------------*/
 151          
 152          void timer0() interrupt interrupt_timer_0_overflow
 153                  {
 154   1              // manually reload timer0 configuration
 155   1              TH0 = timer0_8H;
 156   1              TL0 = timer0_8L;
 157   1              
 158   1              // timer0 is 1ms ticket, count the time flow of timer0, then operate every 2s.
 159   1              if(++timer0_count >= 2000)
 160   1                      {
 161   2                      // reset timer0 ticket counter every 2s
 162   2                      timer0_count=0;
 163   2                      
 164   2                      // detect the battery voltage
 165   2                      ADC_check_result = GetADCResult(6);     
 166   2                      
 167   2                      if(++key_rotate_count < 1)              
 168   2                              {
 169   3                              if((key_rotated_on_flag == 1)||(key_rotated_off_flag == 1))
 170   3                                      {
 171   4                                      ComMode_Data(ComMode_1, 28);                            
 172   4                                      }
 173   3                              }
C51 COMPILER V9.51   MAIN                                                                  09/10/2014 14:03:49 PAGE 4   

 174   2                      else
 175   2                              key_rotate_count = 31;
 176   2                              
 177   2      //              if(lock_rotate_off_flag == 0)
 178   2      //                      {
 179   2                              if(++IDkey_count > 4)
 180   2                                      {
 181   3                                      IDkey_count = 8;
 182   3                                      slave_away_flag = 1;
 183   3                                      if((enable_sensor_delayEN == 0)&&(lock_rotate_off_flag == 1))
 184   3                                              {
 185   4                                              enable_sensor_delayEN = 1;
 186   4                                              enable_sensor_delay_count = 0;
 187   4                                              }
 188   3                                      }                       
 189   2      //                      }
 190   2                                                                              
 191   2                      if((enable_sensor_delayEN == 1)&&(lock_rotate_off_flag == 1))
 192   2                              {
 193   3                              if(++enable_sensor_delay_count >= 5)
 194   3                                      {
 195   4                                      enable_sensor_delay_count = 0;
 196   4                                      enable_sensor_delayEN = 0;
 197   4                                      enable_sensor();
 198   4                                      }
 199   3                              }
 200   2                      
 201   2                              
 202   2                      // whether host has been touched 3 times, if yes, then alarm 2 speech alternantively.
 203   2                      if((host_stolen_alarm1_EN == 1)&&(host_stolen_alarm1_count < 4))
 204   2                              {
 205   3                              stolen_alarm_flag = 1;
 206   3                              if(key_rotate == 0)
 207   3                                      {
 208   4                                      stolen_alarm_speech1();
 209   4                                      }
 210   3                              if(++host_stolen_alarm1_count >= 4)
 211   3                                      {                                                                                       
 212   4                                      host_stolen_alarm1_count = 0;
 213   4                                      host_stolen_alarm1_EN = 0;
 214   4                                      stolen_alarm_flag = 0;
 215   4                                      sensor_3rdalarm_flag = 0;
 216   4                                      }
 217   3                              }
 218   2                      if((host_stolen_alarm2_EN == 1)&&(host_stolen_alarm2_count < 4))
 219   2                              {
 220   3                              stolen_alarm_flag = 1;
 221   3                              if(key_rotate == 0)
 222   3                                      {
 223   4                                      stolen_alarm_speech2();
 224   4                                      }
 225   3                              if(++host_stolen_alarm2_count >= 4)
 226   3                                      {
 227   4                                      host_stolen_alarm2_count = 0;
 228   4                                      host_stolen_alarm2_EN = 0;
 229   4                                      stolen_alarm_flag = 0;
 230   4                                      sensor_3rdalarm_flag = 0;
 231   4                                      }
 232   3                              }                       
 233   2                      }
 234   1              
 235   1              if((key_rotate == 1)&&(key_rotated_on_flag == 0)&&(Auto_Mode == 1))
C51 COMPILER V9.51   MAIN                                                                  09/10/2014 14:03:49 PAGE 5   

 236   1                      {               
 237   2                      Delay(5);
 238   2                      if(key_rotate == 1)
 239   2                              {
 240   3                              // ÉèÖÃ¿ªÔ¿³×ºÍ¹ØÔ¿³×µÄ±êÖ¾Î»
 241   3                              key_rotated_on_flag = 1;
 242   3                              key_rotated_off_flag = 0;
 243   3                              IDkey_count = 0;
 244   3                              IDkey_flag = 0;
 245   3                              slave_away_flag = 0;
 246   3                              key_rotate_count = 31;                  
 247   3                              disable_sensor();       
 248   3                              }
 249   2                      }
 250   1                      
 251   1              // detect whether key is rotated on,  
 252   1              if((key_rotated_on_flag == 1)&&(IDkey_flag == 1)&&(lock_rotate_on_flag == 0)&&(Auto_Mode == 1))         
 253   1                      {                                                                        
 254   2                      magnet_CW(2000, 4000, 28);
 255   2                      IDkey_count = 0;
 256   2                      IDkey_flag = 0;
 257   2                      
 258   2                      slave_nearby_operation();                     
 259   2                      lock_rotate_on_flag = 1;
 260   2                      lock_rotate_off_flag = 0;
 261   2                      key_rotate_count = 31;
 262   2                      
 263   2                      }
 264   1                      
 265   1              if((key_rotate == 0)&&(key_rotated_off_flag == 0)&&(Auto_Mode == 1))
 266   1                      {
 267   2                      Delay(5);
 268   2                      if(key_rotate == 0)
 269   2                              {
 270   3                              // ÉèÖÃ¿ªÔ¿³×ºÍ¹ØÔ¿³×µÄ±êÖ¾Î»
 271   3                              key_rotated_on_flag = 0;
 272   3                              key_rotated_off_flag = 1;
 273   3      
 274   3                              key_rotate_count = 31;
 275   3                              enable_sensor_delayEN = 1;
 276   3                              enable_sensor_delay_count = 0;
 277   3                              }               
 278   2                      }
 279   1      
 280   1              if((slave_away_flag == 1)&&(lock_rotate_off_flag == 0)&&(Auto_Mode == 1))
 281   1                      {
 282   2                      if((vibration_flag == 0)&&(wheeled_flag == 0))
 283   2                              {
 284   3                              // handle with battery status
 285   3                              verifybattery(ADC_check_result);
 286   3                              magnet_ACW(6000, 10000);                        
 287   3                              
 288   3                              // reset key rotation flag
 289   3                              slave_away_operation();
 290   3                              
 291   3                              key_rotate_count = 31;
 292   3                              slave_away_flag = 0;
 293   3                              lock_rotate_on_flag = 0;
 294   3                              lock_rotate_off_flag = 1;
 295   3                              IDkey_flag = 0;
 296   3                              }
 297   2                      }
C51 COMPILER V9.51   MAIN                                                                  09/10/2014 14:03:49 PAGE 6   

 298   1              
 299   1              if((sensor_detect == 0)||(horizontal_sensor == 0))
 300   1                      {
 301   2                      vibration_flag = 1;
 302   2                      vibration_count = 0;
 303   2                      }       
 304   1              
 305   1              if(vibration_flag == 1)
 306   1                      {
 307   2                      if(++vibration_count > 4000)
 308   2                              {
 309   3                              vibration_flag = 0;
 310   3                              vibration_count = 0;
 311   3                              }
 312   2                      }               
 313   1              
 314   1      
 315   1              if(wheeled_rotate == 1)
 316   1                      {
 317   2                      wheeled_flag = 1;
 318   2                      wheeled_count = 0;
 319   2                      }
 320   1              if(wheeled_flag == 1)
 321   1                      {
 322   2                      if(++wheeled_count >= 4000)
 323   2                              {
 324   3                              wheeled_flag = 0;
 325   3                              wheeled_count = 0;
 326   3                  }
 327   2                      }
 328   1      
 329   1      // judge host is fell or raised every 1ms?
 330   1              if((raised_sensor_detect == 1)&&(fell_sensor_detect == 1))
 331   1                      {
 332   2                      // judge vibration sensor is enable?
 333   2                      if(sensor_EN == 1)      
 334   2                              {                       
 335   3                              // sensor trigger status, 0, 1 or 2?
 336   3                              switch(sensor_trigger_count)
 337   3                                      {
 338   4                                      // case 0, it means host is in waiting status. waiting for first touch.
 339   4                                      case 0:
 340   4                                              {
 341   5                                              
 342   5                                              // judge host been touched and also not in vibration alarm
 343   5      //                                      if(((sensor_detect == 0)||(horizontal_sensor == 0))&&(stolen_alarm_flag == 0))          
 344   5                                              if(((sensor_detect == 0)||(horizontal_sensor == 0))&&(stolen_alarm_flag == 0))          
 345   5                                                      {
 346   6                                                      // judge LV is more than 2ms, if yes, it means a effective touch
 347   6                                                      if(++sensor_1ststage_count >= 2)                        
 348   6                                                              {
 349   7                                                              sensor_1ststage_count=0;
 350   7                                                              
 351   7                                                              // sensor trigge status progress to case 1.
 352   7                                                              sensor_trigger_count = 1;
 353   7                                                              // alarm speech for first touoch
 354   7                                                              host_touch_speech();
 355   7                                                              }
 356   6                                                      }
 357   5                                              else
 358   5                                                      {
 359   6                                                      // if no LV, reset the count.
C51 COMPILER V9.51   MAIN                                                                  09/10/2014 14:03:49 PAGE 7   

 360   6                                                      sensor_1ststage_count = 0;
 361   6                                                      }
 362   5                                              }
 363   4                                      break;
 364   4                                      
 365   4                                      // waiting for next touch, 
 366   4                                      case 1:
 367   4                                              {
 368   5      //                                      if((sensor_detect == 0)||(horizontal_sensor == 0))
 369   5                                              if((sensor_detect == 0)||(horizontal_sensor == 0))
 370   5                                                      {
 371   6                                                      // LV for 2s, means a effective touch             8
 372   6                                                      if(++sensor_2ndstage_count >= 2)
 373   6                                                              {
 374   7                                                              sensor_2ndstage_count = 0;
 375   7                                                              sensor_trigger_count = 2;
 376   7                                                              // alarm speech for 2nd touch
 377   7                                                              host_2ndtouch_speech();
 378   7                                                              }
 379   6                                                      }
 380   5                                              else
 381   5                                                      {
 382   6                                                      sensor_2ndstage_count = 0;
 383   6                                                      }
 384   5                                              
 385   5                                              // if there is no touch in 4s, reset sensor trigger status, etc.
 386   5                                              if(++sensor_2ndstage_time >= 4000)
 387   5                                                      {
 388   6                                                      sensor_trigger_count = 0;
 389   6                                                      sensor_2ndstage_count = 0;
 390   6                                                      sensor_1ststage_count = 0;
 391   6                                                      sensor_2ndstage_time = 0;
 392   6                                                      }
 393   5                                              }
 394   4                                      break;
 395   4                                      
 396   4                                      // waiting for 3rd touch
 397   4                                      case 2:
 398   4                                              {
 399   5      //                                      if((sensor_detect == 0)||(horizontal_sensor == 0))
 400   5                                              if((sensor_detect == 0)||(horizontal_sensor == 0))
 401   5                                                      {
 402   6                                                      // 2s LV is a effective touch
 403   6                                                      if(++sensor_3rdstage_count >= 1)
 404   6                                                              {
 405   7                                                              sensor_3rdstage_count = 0;
 406   7                                                              // stolen alarm speech enable
 407   7                                                              host_stolen_alarm1_EN = 1;
 408   7                                                              host_stolen_alarm2_EN = 1;                                              
 409   7                                                              sensor_3rdalarm_flag = 1;                                                       
 410   7                                                              }
 411   6                                                      }
 412   5                                              else
 413   5                                                      {
 414   6                                                      sensor_3rdstage_count = 0;
 415   6                                                      }
 416   5                                              
 417   5                                              // if there is no touch in 4s, reset all.
 418   5                                              if(++sensor_3rdstage_time >= 4000)
 419   5                                                      {
 420   6                                                      sensor_trigger_count = 0;
 421   6                                                      sensor_1ststage_count = 0;
C51 COMPILER V9.51   MAIN                                                                  09/10/2014 14:03:49 PAGE 8   

 422   6                                                      sensor_2ndstage_count = 0;
 423   6                                                      sensor_2ndstage_time = 0;
 424   6                                                      sensor_3rdstage_time = 0;
 425   6                                                      sensor_3rdstage_interval = 800;
 426   6                                                      sensor_3rdstage_count = 0;
 427   6                                                      sensor_3rdstage_effcount = 0;                                   
 428   6                                                      }
 429   5                                              }
 430   4                                      break;
 431   4                                      }
 432   3                              
 433   3                              // judge the wire broken, if yes, it means someone has cut the wire of magnet lock
 434   3                              if((wire_broken == 0) && (wire_broken_count < 51))  
 435   3                                      {
 436   4                                      if(++wire_broken_count > 50)
 437   4                                              {
 438   5                                              host_stolen_alarm1_EN = 1;
 439   5                                              host_stolen_alarm2_EN = 1;      
 440   5                                              wire_broken_count = 51;
 441   5                                              wire_broken_flag = 1;
 442   5                                              }
 443   4                                      }
 444   3                              else if((wire_broken == 1)&&(sensor_3rdalarm_flag == 0))
 445   3                                      {
 446   4                                      wire_broken_count = 0;
 447   4                                      host_stolen_alarm1_EN = 0;
 448   4                                      host_stolen_alarm2_EN = 0;
 449   4                                      }
 450   3                              
 451   3                              // judge whether battery has been stolen, 0.4V/4V
 452   3                              if(ADC_check_result < 0x100)
 453   3                                      {
 454   4                                      battery_stolen_EN = 1;
 455   4                                      }
 456   3                              else if(ADC_check_result > 0x200)
 457   3                                      {
 458   4                                      battery_stolen_EN = 0;
 459   4                                      battery_stolen_count = 0;
 460   4                                      }                       
 461   3                              }
 462   2                      }
 463   1              
 464   1              // judge whether position sensor is enable
 465   1              if(position_sensor_EN==1)               
 466   1                      {
 467   2                      // judge whether there is a LV
 468   2                      if(raised_sensor_detect == 0)   
 469   2                              {
 470   3                              // LV > 0.5s means a effective input
 471   3                              if(++raise_wire_time >= 3)
 472   3                                      {
 473   4                                      // flag raised, and reset fell
 474   4                                      raised_flag=1;
 475   4                                      fell_flag=0;
 476   4                                      raise_wire_time = 11;
 477   4                                      // judge whether there once been a raised or fell.
 478   4                                      if(raised_fell_once_flag == 0)
 479   4                                              {
 480   5                                              // if no, flag raised and fell flag
 481   5                                              raised_fell_flag = 1;                                   
 482   5                                              }
 483   4                                      }               
C51 COMPILER V9.51   MAIN                                                                  09/10/2014 14:03:49 PAGE 9   

 484   3                              }
 485   2                      else
 486   2                              {
 487   3                              raised_flag=0;
 488   3                              raised_alarm_count=0;
 489   3                              raise_wire_time=0;
 490   3                              raised_fell_flag = 0;
 491   3                              }
 492   2            // judge whether there is a LV
 493   2                      if(fell_sensor_detect==0)
 494   2                              {
 495   3                              // LV > 0.5s means a effective input
 496   3                              if(++fell_wire_time >= 3)       
 497   3                                      {
 498   4                                      // flag fell, and reset raised
 499   4                                      fell_flag=1;                    
 500   4                                      raised_flag=0;
 501   4                                      fell_wire_time = 11;
 502   4                                      // judge whether there once been a raised or fell
 503   4                                      if(raised_fell_once_flag == 0)
 504   4                                              {
 505   5                                              raised_fell_flag = 1;                                   
 506   5                                              }
 507   4                                      }               
 508   3                              }
 509   2                      else
 510   2                              {
 511   3                              fell_flag=0;
 512   3                              fell_alarm_count=0;
 513   3                              fell_wire_time=0;
 514   3                              raised_fell_flag = 0;
 515   3                              }
 516   2                      }
 517   1              
 518   1              // judge whether raised or fell, if yes, reset all after 10s.
 519   1              if(raised_fell_flag == 1)
 520   1                      {
 521   2                      if(++raised_fell_number >= 4000)
 522   2                              {
 523   3                              raised_fell_flag = 0;
 524   3                              raised_fell_number = 0;
 525   3                              raised_fell_once_flag = 1;
 526   3                              
 527   3                              sensor_trigger_count = 0;
 528   3                              sensor_1ststage_count = 0;
 529   3                              sensor_2ndstage_count = 0;
 530   3                              sensor_2ndstage_time = 0;
 531   3                              sensor_3rdstage_time = 0;
 532   3                              sensor_3rdstage_interval = 800;
 533   3                              sensor_3rdstage_count = 0;
 534   3                              sensor_3rdstage_effcount = 0;                                   
 535   3                              }
 536   2                      }
 537   1                      
 538   1              // detect the horizontal sensor
 539   1              if(((horizontal_sensor == 0)||(sensor_detect == 0))&&(horizontal_vibration_count > 5000))
 540   1                      {
 541   2                      Delay(3);
 542   2                      if((horizontal_sensor == 0)||(sensor_detect == 0))
 543   2                              {
 544   3                              horizontal_vibration = 1;
 545   3                              horizontal_vibration_count = 0;
C51 COMPILER V9.51   MAIN                                                                  09/10/2014 14:03:49 PAGE 10  

 546   3                              }
 547   2                      }
 548   1              if(++horizontal_vibration_count >= 5000)
 549   1                      {
 550   2                      horizontal_vibration_count = 5001;
 551   2                      horizontal_vibration = 0;
 552   2                      }
 553   1              }
 554          
 555          /*-----------------------------------------------
 556                  ÓÃUART¶Ë¿Ú½ÓÊÕÊı¾İ£¬9600²¨ÌØÂÊ£¬ÊÕµ½ºó±íÊ¾
 557                  ÈÏÖ¤ÒÑÍ¨¹ı¡£
 558          void uart_isr() interrupt 4 //ÖĞ¶Ï½ÓÊÕÊı¾İ
 559                  {
 560                  if(RI)
 561                          {
 562                          RI=0;
 563          
 564                          // assign one byte to buffer[i] 
 565                          received_data_buffer[data_count] = SBUF;
 566                          
 567                          // judge whether buffer[0] is CmdHead
 568                          if((data_count == 0) && (received_data_buffer[0] == IDkey0))
 569                                  {
 570                                  data_count = 1;
 571                                  }
 572                          else if((data_count == 1) && (received_data_buffer[1] == IDkey1))
 573                                  {
 574                                  data_count = 2;
 575                                  }
 576                          else if((data_count == 2) && (received_data_buffer[2] == IDkey2))
 577                                  {
 578                                  data_count = 3;
 579                                  }
 580                          else if((data_count == 3) && (received_data_buffer[3] == IDkey3))
 581                                  {
 582                                  data_count = 4;
 583                                  }
 584                          else if((data_count == 4) && (received_data_buffer[4] == IDkey4))
 585                                  {
 586                                  data_count = 5;
 587                                  }
 588                          else if((data_count == 5) && (received_data_buffer[5] == IDkey5))
 589                                  {
 590                                  data_count = 0; 
 591                                  IDkey_flag = 1;
 592                                  IDkey_count = 0;
 593                                  disable_sensor();
 594                                  }
 595                          else 
 596                                  {
 597                                  data_count = 0;
 598                                  }
 599                          }
 600                  }
 601          -----------------------------------------------*/
 602          
 603          /*--------------------------------------------------------------------
 604                  timerT1()
 605                  ¶¨Ê±Æ÷1Ã¿´ÎÒç³öºóÖ´ĞĞµÄ²Ù×÷£¬µÍËÙÂÊÄ£Ê½½ÓÊÕ
 606                  Êı¾İ¡£
 607          --------------------------------------------------------------------*/
C51 COMPILER V9.51   MAIN                                                                  09/10/2014 14:03:49 PAGE 11  

 608          
 609          void timerT1() interrupt interrupt_timer_1_overflow
 610                  {
 611   1         // reload timer1
 612   1              TH1 = timer1_8H;                                
 613   1              TL1 = timer1_8L;
 614   1              
 615   1              // receive a tyte
 616   1              receive_byte();
 617   1              
 618   1              // receive a word after every byte
 619   1              receive_word();
 620   1              
 621   1              // judge whether a byte has received successfully
 622   1              if(receive_data_finished_flag == 1)
 623   1                      {
 624   2                      receive_data_finished_flag = 0;
 625   2                      // judge which mode is received.
 626   2                      switch(received_data_buffer[2])                 
 627   2                              {
 628   3                              case ComMode_1:  
 629   3                                      {
 630   4                                      IDkey_flag = 1;
 631   4                                      IDkey_count = 0;
 632   4                                      disable_sensor();
 633   4                                      }
 634   3                              break;
 635   3                              }
 636   2                      }
 637   1              }
 638          
 639          
 640          /*---------------------------------------------------
 641                  end of file
 642          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1117    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     49    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     23    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
