C51 COMPILER V9.51   MAIN                                                                  09/01/2014 16:14:34 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN Main.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\keil\C51\BIN\C51.EXE Main.c BROWSE INCDIR(..\Library) DEBUG OBJECTEXTEND

line level    source

   1          /*---------------------------------------------------
   2                  main.c (v1.00)
   3                  
   4                  DDC-Z program, for electrocar.
   5          ----------------------------------------------------*/
   6          
   7          //µç¶¯³µ
   8          #include "Main.h"
   9          #include "port.h"
  10          
  11          #include "AD.h"
  12          #include "voice.h"
  13          #include "pwm.h"
  14          #include "Timer.h"
  15          #include "Delay.h"
  16          #include "communication.h"
  17          #include "Battery.h"
  18          #include "Other.h"
  19          #include "operation.h"
  20          #include "UART.h"
  21                                                  
  22          /*------- Public variable declarations --------------------------*/
  23          extern tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;
  24          extern bit enable_sensor_delayEN;
  25          
  26          // ------ Private variable definitions -----------------------------
  27          bit stolen_alarm_flag = 0;                                      // when host been touch 3 times, this flag 1 before alarm voice present, no
             -t to detect sensor for 1st voice alarm.
  28          bit position_sensor_EN=0;               //Î»ÖÃ´«¸ĞÆ÷£¬¼´µ¹µØÌ§Æğ´«¸ĞÆ÷×Ü¿ª¹Ø£¬1µÄÊ±ºò£¬¼ì²âÕâÁ½¸ö´«¸ĞÆ÷
  29          bit host_stolen_alarm1_EN = 0;      //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒôÊ¹ÄÜ
  30          bit host_stolen_alarm2_EN = 0;      //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶ş¶ÎÓïÒôÊ¹ÄÜ
  31          tByte host_stolen_alarm1_count = 0;             //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒô´ÎÊı
  32          tByte host_stolen_alarm2_count = 0;             //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶ş¶ÎÓïÒô´ÎÊı
  33          bit fell_flag=0;                                                //ÅĞ¶ÏÖ÷»úµ¹ÏÂºó£¬ÖÃ1
  34          bit raised_flag=0;                                      //ÅĞ¶ÏÖ÷»ú±»Ì§Æğºó£¬ÖÃ1
  35          tByte sensor_2ndstage_count = 0;                //´«¸ĞÆ÷½øÈëµÚ¶ş½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  36          tWord sensor_3rdstage_time = 0;                 //´«¸ĞÆ÷½øÈëµÚÈı½×¶ÎµÄÊ±¼ä£¬
  37          tByte sensor_3rdstage_effcount = 0;             //´«¸ĞÆ÷½øÈëµÚÈı½×¶Îºó£¬ÓĞĞ§´¥Åö´ÎÊıµÄ¼ÆÊı
  38          tByte sensor_3rdstage_count = 0;                        //´«¸ĞÆ÷½øÈëµÚÈı½×¶Îºó£¬µÍµçÆ½µÄ¼ÆÊı
  39          tWord sensor_3rdstage_interval = 0;             //´«¸ĞÆ÷ÔÚµÚÈı½×¶ÎÖĞ£¬Ã¿´ÎÓĞĞ§µÍµçÆ½¼ÆÊıÖ®¼äµÄÊ±¼ä¼ä¸ô¡£ÔÚÕâÆÚ¼äµÄµÍµ
             -çÆ½²»ÈÏÎªÓĞĞ§¡£
  40          bit raised_fell_flag = 0;                                       //µ¹µØ»òÕßÌ§Æğ´¥·¢ºó£¬´Ë±êÖ¾Î»ÖÃ1
  41          tByte sensor_trigger_count=0;           //´«¸ĞÆ÷´¥·¢¼ÆÊı
  42          tWord sensor_2ndstage_time=0;           //´«¸ĞÆ÷½øÈëµÚ¶ş½×¶ÎºóÁ÷ÊÅÊ±¼äµÄ¼ÆÊı
  43          tByte sensor_1ststage_count=0;  //´«¸ĞÆ÷µÚÒ»½×¶ÎÅĞ¶ÏµÍµçÆ½µÄ¼ÆÊı
  44          tByte nearby_away_interval = 0;         //¸½»úÀë¿ªºÍ¿¿½üÊ±£¬ÓïÒôÌáÊ¾ºÍ¿ª¹ØËøµÄÊ±¼ä¼ä¸ô
  45          
  46          tByte raised_alarm_count = 0;    //Ö÷»ú±»Ì§Æğºó£¬Ïò¸½»ú·¢³ö±¨¾¯ĞÅºÅµÄ´ÎÊı
  47          tByte fell_alarm_count=0;        //Ö÷»úµ¹µØºó£¬Ïò¸½»ú·¢³ö±¨¾¯ĞÅºÅµÄ´ÎÊı
  48          tWord timer0_count=0;           // counter for timer0, increment every ticket                   
  49          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};             //½ÓÊÕÊı¾İ»º´æ
  50          bit receive_data_finished_flag = 0;             //½ÓÊÕÕâÒ»´®Êı¾İÍê³Éºó£¬´Ë±êÖ¾Î»ÖÃ1
  51          tByte data_count = 0;                           //½ÓÊÕÊı¾İ»º´æµÄÎ»Êı£¬¼´±íÃ÷µÚ¼¸¸ö»º´æÊı¾İ
  52          tByte one_receive_byte = 0;             //½ÓÊÕÊı¾İµÄÒ»¸ö×Ö½Ú£¬½ÓÊÕÍêºó½«Æä¸³Öµ¸øreceived_data_bufferÏà¶ÔÓ¦µÄ×Ö½Ú
  53          tByte one_receive_byte_count = 0;                       //one_receive_byteÓĞ8Î»£¬´Ë¼ÆÊı±íÃ÷½ÓÊÕµ½µÚ¼¸Î»£¬Ã¿´Î¼ÆÊıµ½8µÄÊ±ºò±íÃ÷
C51 COMPILER V9.51   MAIN                                                                  09/01/2014 16:14:34 PAGE 2   

             -Ò»¸ö×Ö½Ú½ÓÊÕÍê³É¡£
  54          bit receive_wire_flag = 1;              //½ÓÊÕÍ¨ĞÅÏßµÄ±êÖ¾Î»£¬1±íÃ÷¸ßµçÆ½£¬0±íÃ÷µÍµçÆ½£¬Ã¿´Îtimer1Òç³öÊ±£¬ÅĞ¶ÏP1.1Ò»´Î
             -¡£ÒÔ´ËÀ´±íÃ÷ÊÇ·ñÎªÒ»´ÎÕıÈ·µÄÏÂ½µÑØ
  55          tByte receive_HV_count = 0;             //¶¨Ê±Æ÷T1ÔÚÃ»ÓĞĞÅºÅµ½À´µÄÊ±ºò£¬¶Ô¸ßµçÆ½¼ÆÊı£¬Ò»µ©³¬¹ıÄ³¸öÖµ£¬Ôò½«one_receive
             -_byte_countÇå0
  56          tByte receive_LV_count = 0;             //Ã¿´Îtimer1Òç³öÊ±ÅĞ¶Ï½ÓÊÕÏßÈç¹ûÎªLV£¬Ôò¼ÆÊı¼Ó1£¬ÒÔ´ËÀ´±íÃ÷µÍµçÆ½µÄÊ±¼ä
  57          tByte fell_wire_time=0;          //µ¹µØ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  58          tByte raise_wire_time=0;                        //Ì§Æğ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  59          tWord raised_fell_number = 0;                           //µ¹µØ»òÕßÌ§Æğ³ö·¢ºó£¬¼ÆÊı£¬µ½´ïÒ»¶¨ÊıÖµºó£¬½«ÆäÓë±êÖ¾Î»Ò»ÆğÇåÁã¡£
  60          bit raised_fell_once_flag = 0;                  //raised_fell_flagÊÇ·ñÔø¾­±êÖ¾¹ı£¬Èç¹û±êÖ¾¹ıÔòÖÃ1.È»ºóÖ÷»ú±»»Ö¸´µ¹µØ»òÕß»
             -Ö¸´Ì§ÆğÊ±£¬´Ë±êÖ¾Î»¸´Î»¡£
  61          tByte key_rotated_on_flag = 1;                  //µç¶¯³µ¿ªÆô¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  62          tWord ADC_check_result = 0;             //×÷ÎªAD¼ì²âÖµ
  63          tByte wire_broken_count = 0;            // ×÷Îª¶ÏÏßºóµÄÊ±¼ä¼ì²â
  64          bit battery_stolen_EN = 0;                      // ×÷Îªµç³Ø±»µÁµÄÊ¹ÄÜ¶Ë
  65          tByte battery_stolen_count = 0; // ×÷Îªµç³Ø±»µÁµÄ±¨¾¯´ÎÊı
  66          bit horizontal_vibration = 0;           // ±íÊ¾´¹Ö±´«¸ĞÆ÷ÔÚÕñ¶¯£¬´ËÊ±¾ÍËã¹ØÔ¿³×£¬Ò²²»ÄÜÖ´ĞĞ¹ØÔ¿³×µÄ²Ù×÷¡
  67          tWord horizontal_vibration_count = 0;   //´¹Ö±´«¸ĞÆ÷´¥·¢ºó£¬¶ÔÊ±¼ä½øĞĞ¼ÆÊı¡£
  68          bit vibration_flag = 0;
  69          tWord vibration_count = 0;
  70          bit wire_broken_flag = 0;                       // ¼ô¶ÏËøÏßµÄ±êÖ¾Î»
  71          tByte IDkey5 = IDkey0^IDkey1^IDkey2^IDkey3^IDkey4;              // ÓÉÇ°5Î»ÃÜÂë×é³ÉµÄÒì»ò
  72          bit IDkey_flag = 0;                     // µ±ID¿¨¿¿½üÊ±ÈÏÖ¤Í¨¹ıºóÖÃ1£¬
  73          tByte IDkey_count = 0;          // ID¿¨ÈÏÖ¤Í¨¹ıºó£¬¼ÆÊ±1·ÖÖÓ£¬Ê¹Ô¿³×ÄÜ×ª¶¯¡£
  74          bit sensor_EN = 0;
  75          tByte enable_sensor_delay_count = 0;            // ´«¸ĞÆ÷ÑÓ³ÙµÄÊ±¼ä
  76          bit sensor_3rdalarm_flag = 0;
  77          bit wheeled_flag = 0;
  78          tWord wheeled_count = 0;
  79          
  80          /*------- Private variable declarations --------------------------*/
  81          
  82          void main()
  83                  {
  84   1              InitUART();
  85   1              InitT0(1);
  86   1              TI = 0;
  87   1              RI = 0;
  88   1              ES = 1;
  89   1              ET0 = 1;
  90   1              PS = 1;
  91   1              EA = 1;
  92   1      
  93   1              sensor_EN = 0;
  94   1              position_sensor_EN = 0;
  95   1      
  96   1              noVoice();
  97   1      
  98   1              voice_EN=0;             //½«¹¦·Å¹Ø±Õ
  99   1      
 100   1              raised_sensor_detect=1;
 101   1              fell_sensor_detect=1;
 102   1      
 103   1              P10=1;
 104   1              
 105   1              horizontal_sensor = 1;
 106   1              
 107   1              // turn off transmitter, turn on receiver
 108   1              transmiter_EN = 1;
 109   1              receiver_EN = 0;
 110   1      
 111   1      
C51 COMPILER V9.51   MAIN                                                                  09/01/2014 16:14:34 PAGE 3   

 112   1              nearby_away_interval = 6;                       //³õÊ¼»¯Ê¹¸½»úºÍÖ÷»ú¿ª¹Ø»úµÄ¼ÆÊıÎª¿ÉÒÔÖ´ĞĞµÄ×´Ì¬
 113   1              
 114   1              // initialize the magnet, 
 115   1              MagentControl_1 = 1;
 116   1              MagentControl_2 = 1;
 117   1              
 118   1              transmiter_power = 1; 
 119   1         
 120   1              vibration_flag = 1;
 121   1              
 122   1              // lock the external motor, ·ÀÖ¹Ëø»¹Ã»ÍêÈ«´ò¿ªµÄÊ±ºò£¬³µÊÖ¼Óµçµ¼ÖÂÂÖ×ÓÓëËøµÄ¸æËßÅö×²¡£ 
 123   1              motor_lock = 1;
 124   1              
 125   1              while(1)
 126   1                      {
 127   2      
 128   2                      if((sensor_detect == 0)||(horizontal_sensor == 0))
 129   2                              {
 130   3                              Delay(2);
 131   3                              if((sensor_detect == 0)||(horizontal_sensor == 0))
 132   3                                      {
 133   4                                      vibration_flag = 1;
 134   4                                      vibration_count = 0;                    
 135   4                                      }
 136   3                              }               
 137   2                              
 138   2                      // whether host has been touched 3 times, if yes, then alarm 2 speech alternantively.
 139   2                      if((host_stolen_alarm1_EN == 1)&&(host_stolen_alarm1_count < 4))
 140   2                              {
 141   3                              stolen_alarm_flag = 1;
 142   3                              if(key_rotate == 0)
 143   3                                      {
 144   4                                      stolen_alarm_speech1();
 145   4                                      }
 146   3                              if(++host_stolen_alarm1_count >= 4)
 147   3                                      {
 148   4                                      host_stolen_alarm1_count = 0;
 149   4                                      host_stolen_alarm1_EN = 0;
 150   4                                      stolen_alarm_flag = 0;
 151   4                                      sensor_3rdalarm_flag = 0;
 152   4                                      }
 153   3                              }
 154   2                      if((host_stolen_alarm2_EN == 1)&&(host_stolen_alarm2_count < 4))
 155   2                              {
 156   3                              stolen_alarm_flag = 1;
 157   3                              if(key_rotate == 0)
 158   3                                      {
 159   4                                      stolen_alarm_speech2();
 160   4                                      }
 161   3                              if(++host_stolen_alarm2_count >= 4)
 162   3                                      {
 163   4                                      host_stolen_alarm2_count = 0;
 164   4                                      host_stolen_alarm2_EN = 0;
 165   4                                      stolen_alarm_flag = 0;
 166   4                                      sensor_3rdalarm_flag = 0;
 167   4                                      }
 168   3                              }
 169   2                      
 170   2                      // judge whether battery has been stolen, 0.4V/4V
 171   2                      if((ADC_check_result < 0x096) && (key_rotate == 0))
 172   2                              {
 173   3                              battery_stolen_EN = 1;
C51 COMPILER V9.51   MAIN                                                                  09/01/2014 16:14:34 PAGE 4   

 174   3                              }                       
 175   2                      else if(ADC_check_result > 0x100)
 176   2                              {
 177   3                              battery_stolen_EN = 0;
 178   3                              battery_stolen_count = 0;
 179   3                              }                       
 180   2      
 181   2                      }
 182   1              }
 183          
 184          /*------------------------------------------------------------------
 185                  timerT0()
 186                  operation every ticket.
 187          --------------------------------------------------------------------*/
 188          
 189          void timer0() interrupt interrupt_timer_0_overflow
 190                  {
 191   1              // manually reload timer0 configuration
 192   1              TH0 = timer0_8H;
 193   1              TL0 = timer0_8L;
 194   1              
 195   1              // timer0 is 1ms ticket, count the time flow of timer0, then operate every 2s.
 196   1              if(++timer0_count >= 2000)
 197   1                      {
 198   2                      // reset timer0 ticket counter every 2s
 199   2                      timer0_count=0;
 200   2                      
 201   2      
 202   2                      // detect the battery voltage
 203   2                      ADC_check_result = GetADCResult(6);
 204   2                      
 205   2                      if(IDkey_flag == 1)
 206   2                              {
 207   3                              if(++IDkey_count >= 15)
 208   3                                      {
 209   4                                      IDkey_count = 0;
 210   4                                      IDkey_flag = 0;
 211   4                                      if(key_rotated_on_flag == 0)
 212   4                                              {
 213   5                                              enable_sensor();                                        
 214   5                                              }
 215   4                                      }                       
 216   3                              }
 217   2                      
 218   2                      if((enable_sensor_delayEN == 1)&&(key_rotate == 0))
 219   2                              {
 220   3                              if(++enable_sensor_delay_count >= 15)
 221   3                                      {
 222   4                                      enable_sensor_delay_count = 0;
 223   4                                      enable_sensor_delayEN = 0;
 224   4                                      enable_sensor();
 225   4                                      }
 226   3                              }
 227   2                      }
 228   1                      
 229   1              if(vibration_flag == 1)
 230   1                      {
 231   2                      if(++vibration_count >= 2000)
 232   2                              {
 233   3                              vibration_flag = 0;
 234   3                              vibration_count = 0;
 235   3                              }
C51 COMPILER V9.51   MAIN                                                                  09/01/2014 16:14:34 PAGE 5   

 236   2                      }
 237   1      
 238   1              // detect whether key is rotated on,  
 239   1              if((key_rotate == 1)&&(key_rotated_on_flag == 0)&&(IDkey_flag == 1))            
 240   1      //      if((key_rotate == 1)&&(key_rotated_on_flag == 0))               
 241   1                      {
 242   2                      Delay(5);
 243   2                      // anti-trigger, Delay(5) confirm the key rotation.
 244   2                      if(key_rotate == 1)
 245   2                              {
 246   3                              // turn on the magnet
 247   3                              if(battery_stolen_EN = 1)
*** WARNING C276 IN LINE 247 OF Main.c: constant in condition expression
 248   3                                      magnet_CW(2000, 5000, 42);
 249   3                  else
 250   3                                      magnet_CW(2000, 5000, 42);
 251   3                              slave_nearby_operation();
 252   3                              // flag key rotation status
 253   3                              key_rotated_on_flag = 1;
 254   3                              
 255   3                              IDkey_count = 0;
 256   3                              IDkey_flag = 0;
 257   3                              }
 258   2                      }               
 259   1                                      
 260   1              // detect whether key is rotated off
 261   1              if((key_rotate == 0)&&(key_rotated_on_flag == 1))
 262   1                      {
 263   2                      if((vibration_flag == 0)&&(wheeled_flag == 0))
 264   2                              {
 265   3                              Delay(5);
 266   3                              if(key_rotate == 0)
 267   3                                      {
 268   4                                      // handle with battery status
 269   4                                      verifybattery(ADC_check_result);
 270   4                                      // reset key rotation flag
 271   4                                      key_rotated_on_flag=0;
 272   4                                      // turn off the magnet 
 273   4                                      if(battery_stolen_EN == 1)
 274   4                                              magnet_ACW(2000, 12000);
 275   4                                      else
 276   4                                              magnet_ACW(2000, 10000);
 277   4                                              
 278   4                                      slave_away_operation();
 279   4                                      }                               
 280   3                              }
 281   2                      }
 282   1                      
 283   1              if((sensor_detect == 0)||(horizontal_sensor == 0))
 284   1                      {
 285   2                      vibration_flag = 1;
 286   2                      vibration_count = 0;
 287   2                      }
 288   1      
 289   1              if(wheeled_rotate == 1)
 290   1                      {
 291   2                      wheeled_flag = 1;
 292   2                      wheeled_count = 0;
 293   2                      }
 294   1              if(wheeled_flag == 1)
 295   1                      {
 296   2                      if(++wheeled_count >= 2000)
C51 COMPILER V9.51   MAIN                                                                  09/01/2014 16:14:34 PAGE 6   

 297   2                              {
 298   3                              wheeled_flag = 0;
 299   3                              wheeled_count = 0;
 300   3                  }
 301   2                      }
 302   1                                      
 303   1      
 304   1              // judge host is fell or raised every 1ms?
 305   1              if((raised_sensor_detect == 1)&&(fell_sensor_detect == 1))
 306   1                      {
 307   2                      // judge vibration sensor is enable?
 308   2                      if(sensor_EN == 1)      
 309   2                              {                       
 310   3                              // sensor trigger status, 0, 1 or 2?
 311   3                              switch(sensor_trigger_count)
 312   3                                      {
 313   4                                      // case 0, it means host is in waiting status. waiting for first touch.
 314   4                                      case 0:
 315   4                                              {
 316   5                                              
 317   5                                              // judge host been touched and also not in vibration alarm
 318   5      //                                      if((sensor_detect == 0)&&(stolen_alarm_flag == 0)&&(transmiter_EN == 1))                
 319   5                                              if(((sensor_detect == 0)||(horizontal_sensor == 0))&&(stolen_alarm_flag == 0))          
 320   5                                                      {
 321   6                                                      // judge LV is more than 2ms, if yes, it means a effective touch
 322   6                                                      if(++sensor_1ststage_count >= 2)                        
 323   6                                                              {
 324   7                                                              sensor_1ststage_count=0;
 325   7                                                              
 326   7                                                              // sensor trigge status progress to case 1.
 327   7                                                              sensor_trigger_count = 1;
 328   7                                                              // alarm speech for first touoch
 329   7                                                              host_touch_speech();
 330   7                           }
 331   6                                                      }
 332   5                                              else
 333   5                                                      {
 334   6                                                      // if no LV, reset the count.
 335   6                                                      sensor_1ststage_count = 0;
 336   6                                                      }
 337   5                                              }
 338   4                                      break;
 339   4                                      
 340   4                                      // waiting for next touch, 
 341   4                                      case 1:
 342   4                                              {
 343   5                                              if((sensor_detect == 0)||(horizontal_sensor == 0))
 344   5                                                      {
 345   6                                                      // LV for 2s, means a effective touch
 346   6                                                      if(++sensor_2ndstage_count >= 2)
 347   6                                                              {
 348   7                                                              sensor_2ndstage_count = 0;
 349   7                                                              sensor_trigger_count = 2;
 350   7                                                              // alarm speech for 2nd touch
 351   7                                                              host_2ndtouch_speech();
 352   7                                                              }
 353   6                                                      }
 354   5                                              else
 355   5                                                      {
 356   6                                                      sensor_2ndstage_count = 0;
 357   6                                                      }
 358   5                                              
C51 COMPILER V9.51   MAIN                                                                  09/01/2014 16:14:34 PAGE 7   

 359   5                                              // if there is no touch in 4s, reset sensor trigger status, etc.
 360   5                                              if(++sensor_2ndstage_time >= 4000)
 361   5                                                      {
 362   6                                                      sensor_trigger_count = 0;
 363   6                                                      sensor_2ndstage_count = 0;
 364   6                                                      sensor_1ststage_count = 0;
 365   6                                                      sensor_2ndstage_time = 0;
 366   6                                                      }
 367   5                                              }
 368   4                                      break;
 369   4                                      
 370   4                                      // waiting for 3rd touch
 371   4                                      case 2:
 372   4                                              {
 373   5                                              if((sensor_detect == 0)||(horizontal_sensor == 0))
 374   5                                                      {
 375   6                                                      // 2s LV is a effective touch
 376   6                                                      if(++sensor_3rdstage_count >= 1)
 377   6                                                              {
 378   7                                                              sensor_3rdstage_count = 0;
 379   7                                                              // stolen alarm speech enable
 380   7                                                              host_stolen_alarm1_EN = 1;
 381   7                                                              host_stolen_alarm2_EN = 1;      
 382   7                                                              sensor_3rdalarm_flag = 1;                                                       
 383   7                                                              }
 384   6                                                      }
 385   5                                              else
 386   5                                                      {
 387   6                                                      sensor_3rdstage_count = 0;
 388   6                                                      }
 389   5                                              
 390   5                                              // if there is no touch in 4s, reset all.
 391   5                                              if(++sensor_3rdstage_time >= 4000)
 392   5                                                      {
 393   6                                                      sensor_trigger_count = 0;
 394   6                                                      sensor_1ststage_count = 0;
 395   6                                                      sensor_2ndstage_count = 0;
 396   6                                                      sensor_2ndstage_time = 0;
 397   6                                                      sensor_3rdstage_time = 0;
 398   6                                                      sensor_3rdstage_interval = 800;
 399   6                                                      sensor_3rdstage_count = 0;
 400   6                                                      sensor_3rdstage_effcount = 0;                                   
 401   6                                                      }
 402   5                                              }
 403   4                                      break;
 404   4                                      }
 405   3                              
 406   3                              // judge the wire broken, if yes, it means someone has cut the wire of magnet lock
 407   3                              if((wire_broken == 0) && (wire_broken_count < 51))  
 408   3                                      {
 409   4                                      if(++wire_broken_count > 50)
 410   4                                              {
 411   5                                              host_stolen_alarm1_EN = 1;
 412   5                                              host_stolen_alarm2_EN = 1;      
 413   5                                              wire_broken_count = 51;
 414   5                                              }       
 415   4                                      }
 416   3                              else if((wire_broken == 1)&&(sensor_3rdalarm_flag == 0))
 417   3                                      {
 418   4                                      wire_broken_count = 0;
 419   4                                      host_stolen_alarm1_EN = 0;
 420   4                                      host_stolen_alarm2_EN = 0;
C51 COMPILER V9.51   MAIN                                                                  09/01/2014 16:14:34 PAGE 8   

 421   4                                      }
 422   3                              
 423   3                              }
 424   2                      }
 425   1              
 426   1              // judge whether position sensor is enable
 427   1              if(position_sensor_EN==1)               
 428   1                      {
 429   2                      // judge whether there is a LV
 430   2                      if(raised_sensor_detect == 0)   
 431   2                              {
 432   3                              // LV > 0.5s means a effective input
 433   3                              if(++raise_wire_time==10)
 434   3                                      {
 435   4                                      // flag raised, and reset fell
 436   4                                      raised_flag=1;
 437   4                                      fell_flag=0;
 438   4                                      // judge whether there once been a raised or fell.
 439   4                                      if(raised_fell_once_flag == 0)
 440   4                                              {
 441   5                                              // if no, flag raised and fell flag
 442   5                                              raised_fell_flag = 1;                                   
 443   5                                              }
 444   4                                      }               
 445   3                              }
 446   2                      else
 447   2                              {
 448   3                              raised_flag=0;
 449   3                              raised_alarm_count=0;
 450   3                              raise_wire_time=0;
 451   3                              raised_fell_flag = 0;
 452   3                              }
 453   2            // judge whether there is a LV
 454   2                      if(fell_sensor_detect==0)
 455   2                              {
 456   3                              // LV > 0.5s means a effective input
 457   3                              if(++fell_wire_time==10)        
 458   3                                      {
 459   4                                      // flag fell, and reset raised
 460   4                                      fell_flag=1;                    
 461   4                                      raised_flag=0;
 462   4                                      // judge whether there once been a raised or fell
 463   4                                      if(raised_fell_once_flag == 0)
 464   4                                              {
 465   5                                              raised_fell_flag = 1;                                   
 466   5                                              }
 467   4                                      }               
 468   3                              }
 469   2                      else
 470   2                              {
 471   3                              fell_flag=0;
 472   3                              fell_alarm_count=0;
 473   3                              fell_wire_time=0;
 474   3                              raised_fell_flag = 0;
 475   3                              }
 476   2                      }
 477   1              
 478   1              // judge whether raised or fell, if yes, reset all after 10s.
 479   1              if(raised_fell_flag == 1)
 480   1                      {
 481   2                      if(++raised_fell_number >= 4000)
 482   2                              {
C51 COMPILER V9.51   MAIN                                                                  09/01/2014 16:14:34 PAGE 9   

 483   3                              raised_fell_flag = 0;
 484   3                              raised_fell_number = 0;
 485   3                              raised_fell_once_flag = 1;
 486   3                              
 487   3                              sensor_trigger_count = 0;
 488   3                              sensor_1ststage_count = 0;
 489   3                              sensor_2ndstage_count = 0;
 490   3                              sensor_2ndstage_time = 0;
 491   3                              sensor_3rdstage_time = 0;
 492   3                              sensor_3rdstage_interval = 800;
 493   3                              sensor_3rdstage_count = 0;
 494   3                              sensor_3rdstage_effcount = 0;                                   
 495   3                              }
 496   2                      }
 497   1              
 498   1              // detect the horizontal sensor
 499   1              if(((horizontal_sensor == 0)||(sensor_detect == 0))&&(horizontal_vibration_count > 5000))
 500   1                      {
 501   2                      Delay(3);
 502   2                      if((horizontal_sensor == 0)||(sensor_detect == 0))
 503   2                              {
 504   3                              horizontal_vibration = 1;
 505   3                              horizontal_vibration_count = 0;
 506   3                              }
 507   2                      }
 508   1              if(++horizontal_vibration_count >= 5000)
 509   1                      {
 510   2                      horizontal_vibration_count = 5001;
 511   2                      horizontal_vibration = 0;
 512   2                      }
 513   1              }
 514          
 515          /*-----------------------------------------------
 516                  ?UART??????,9600???,?????
 517                  ??????
 518          -----------------------------------------------*/
 519          void uart_isr() interrupt 4 //??????
 520                  {
 521   1              if(RI)
 522   1                      {
 523   2                      RI=0;
 524   2      
 525   2                      // assign one byte to buffer[i] 
 526   2                      received_data_buffer[data_count] = SBUF;
 527   2                      
 528   2                      // judge whether buffer[0] is CmdHead
 529   2                      if((data_count == 0) && (received_data_buffer[0] == IDkey0))
 530   2                              {
 531   3                              data_count = 1;
 532   3                              }
 533   2                      else if((data_count == 1) && (received_data_buffer[1] == IDkey1))
 534   2                              {
 535   3                              data_count = 2;
 536   3                              }
 537   2                      else if((data_count == 2) && (received_data_buffer[2] == IDkey2))
 538   2                              {
 539   3                              data_count = 3;
 540   3                              }
 541   2                      else if((data_count == 3) && (received_data_buffer[3] == IDkey3))
 542   2                              {
 543   3                              data_count = 4;
 544   3                              }
C51 COMPILER V9.51   MAIN                                                                  09/01/2014 16:14:34 PAGE 10  

 545   2                      else if((data_count == 4) && (received_data_buffer[4] == IDkey4))
 546   2                              {
 547   3                              data_count = 5;
 548   3                              }
 549   2                      else if((data_count == 5) && (received_data_buffer[5] == IDkey5))
 550   2                              {
 551   3                              data_count = 0; 
 552   3                              IDkey_flag = 1;
 553   3                              IDkey_count = 0;
 554   3                              disable_sensor();
 555   3                              }
 556   2                      else 
 557   2                              {
 558   3                              data_count = 0;
 559   3                              }
 560   2                      }
 561   1              }
 562          
 563          
 564          /*---------------------------------------------------
 565                  end of file
 566          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1118    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     48    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     18    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
