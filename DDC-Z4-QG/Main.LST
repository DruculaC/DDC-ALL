C51 COMPILER V9.51   MAIN                                                                  09/04/2014 10:05:25 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN Main.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\keil\C51\BIN\C51.EXE Main.c BROWSE INCDIR(..\Library) DEBUG OBJECTEXTEND

line level    source

   1          /*---------------------------------------------------
   2                  main.c (v1.00)
   3                  
   4                  DDC-Z program, for electrocar, with ID card.
   5          ----------------------------------------------------*/
   6          
   7          //µç¶¯³µ
   8          #include "Main.h"
   9          #include "port.h"
  10          
  11          #include "AD.h"
  12          #include "voice.h"
  13          #include "pwm.h"
  14          #include "Timer.h"
  15          #include "Delay.h"
  16          #include "communication.h"
  17          #include "Battery.h"
  18          #include "Other.h"
  19          #include "operation.h"
  20          #include "UART.h"
  21                                                  
  22          /*------- Public variable declarations --------------------------*/
  23          extern tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;
  24          extern bit enable_sensor_delayEN;
  25          
  26          // ------ Private variable definitions -----------------------------
  27          bit stolen_alarm_flag = 0;                                      // when host been touch 3 times, this flag 1 before alarm voice present, no
             -t to detect sensor for 1st voice alarm.
  28          bit position_sensor_EN=0;               //Î»ÖÃ´«¸ÐÆ÷£¬¼´µ¹µØÌ§Æð´«¸ÐÆ÷×Ü¿ª¹Ø£¬1µÄÊ±ºò£¬¼ì²âÕâÁ½¸ö´«¸ÐÆ÷
  29          bit host_stolen_alarm1_EN = 0;      //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒôÊ¹ÄÜ
  30          bit host_stolen_alarm2_EN = 0;      //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶þ¶ÎÓïÒôÊ¹ÄÜ
  31          tByte host_stolen_alarm1_count = 0;             //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒô´ÎÊý
  32          tByte host_stolen_alarm2_count = 0;             //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶þ¶ÎÓïÒô´ÎÊý
  33          bit fell_flag=0;                                                //ÅÐ¶ÏÖ÷»úµ¹ÏÂºó£¬ÖÃ1
  34          bit raised_flag=0;                                      //ÅÐ¶ÏÖ÷»ú±»Ì§Æðºó£¬ÖÃ1
  35          tByte sensor_2ndstage_count = 0;                //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  36          tWord sensor_3rdstage_time = 0;                 //´«¸ÐÆ÷½øÈëµÚÈý½×¶ÎµÄÊ±¼ä£¬
  37          tByte sensor_3rdstage_effcount = 0;             //´«¸ÐÆ÷½øÈëµÚÈý½×¶Îºó£¬ÓÐÐ§´¥Åö´ÎÊýµÄ¼ÆÊý
  38          tByte sensor_3rdstage_count = 0;                        //´«¸ÐÆ÷½øÈëµÚÈý½×¶Îºó£¬µÍµçÆ½µÄ¼ÆÊý
  39          tWord sensor_3rdstage_interval = 0;             //´«¸ÐÆ÷ÔÚµÚÈý½×¶ÎÖÐ£¬Ã¿´ÎÓÐÐ§µÍµçÆ½¼ÆÊýÖ®¼äµÄÊ±¼ä¼ä¸ô¡£ÔÚÕâÆÚ¼äµÄµÍµ
             -çÆ½²»ÈÏÎªÓÐÐ§¡£
  40          bit raised_fell_flag = 0;                                       //µ¹µØ»òÕßÌ§Æð´¥·¢ºó£¬´Ë±êÖ¾Î»ÖÃ1
  41          tByte sensor_trigger_count=0;           //´«¸ÐÆ÷´¥·¢¼ÆÊý
  42          tWord sensor_2ndstage_time=0;           //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶ÎºóÁ÷ÊÅÊ±¼äµÄ¼ÆÊý
  43          tByte sensor_1ststage_count=0;  //´«¸ÐÆ÷µÚÒ»½×¶ÎÅÐ¶ÏµÍµçÆ½µÄ¼ÆÊý
  44          tByte nearby_away_interval = 0;         //¸½»úÀë¿ªºÍ¿¿½üÊ±£¬ÓïÒôÌáÊ¾ºÍ¿ª¹ØËøµÄÊ±¼ä¼ä¸ô
  45          
  46          tByte raised_alarm_count = 0;    //Ö÷»ú±»Ì§Æðºó£¬Ïò¸½»ú·¢³ö±¨¾¯ÐÅºÅµÄ´ÎÊý
  47          tByte fell_alarm_count=0;        //Ö÷»úµ¹µØºó£¬Ïò¸½»ú·¢³ö±¨¾¯ÐÅºÅµÄ´ÎÊý
  48          tWord timer0_count=0;           // counter for timer0, increment every ticket                   
  49          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};             //½ÓÊÕÊý¾Ý»º´æ
  50          bit receive_data_finished_flag = 0;             //½ÓÊÕÕâÒ»´®Êý¾ÝÍê³Éºó£¬´Ë±êÖ¾Î»ÖÃ1
  51          tByte data_count = 0;                           //½ÓÊÕÊý¾Ý»º´æµÄÎ»Êý£¬¼´±íÃ÷µÚ¼¸¸ö»º´æÊý¾Ý
  52          tByte one_receive_byte = 0;             //½ÓÊÕÊý¾ÝµÄÒ»¸ö×Ö½Ú£¬½ÓÊÕÍêºó½«Æä¸³Öµ¸øreceived_data_bufferÏà¶ÔÓ¦µÄ×Ö½Ú
  53          tByte one_receive_byte_count = 0;                       //one_receive_byteÓÐ8Î»£¬´Ë¼ÆÊý±íÃ÷½ÓÊÕµ½µÚ¼¸Î»£¬Ã¿´Î¼ÆÊýµ½8µÄÊ±ºò±íÃ÷
C51 COMPILER V9.51   MAIN                                                                  09/04/2014 10:05:25 PAGE 2   

             -Ò»¸ö×Ö½Ú½ÓÊÕÍê³É¡£
  54          bit receive_wire_flag = 1;              //½ÓÊÕÍ¨ÐÅÏßµÄ±êÖ¾Î»£¬1±íÃ÷¸ßµçÆ½£¬0±íÃ÷µÍµçÆ½£¬Ã¿´Îtimer1Òç³öÊ±£¬ÅÐ¶ÏP1.1Ò»´Î
             -¡£ÒÔ´ËÀ´±íÃ÷ÊÇ·ñÎªÒ»´ÎÕýÈ·µÄÏÂ½µÑØ
  55          tByte receive_HV_count = 0;             //¶¨Ê±Æ÷T1ÔÚÃ»ÓÐÐÅºÅµ½À´µÄÊ±ºò£¬¶Ô¸ßµçÆ½¼ÆÊý£¬Ò»µ©³¬¹ýÄ³¸öÖµ£¬Ôò½«one_receive
             -_byte_countÇå0
  56          tByte receive_LV_count = 0;             //Ã¿´Îtimer1Òç³öÊ±ÅÐ¶Ï½ÓÊÕÏßÈç¹ûÎªLV£¬Ôò¼ÆÊý¼Ó1£¬ÒÔ´ËÀ´±íÃ÷µÍµçÆ½µÄÊ±¼ä
  57          tByte fell_wire_time=0;          //µ¹µØ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  58          tByte raise_wire_time=0;                        //Ì§Æð¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  59          tWord raised_fell_number = 0;                           //µ¹µØ»òÕßÌ§Æð³ö·¢ºó£¬¼ÆÊý£¬µ½´ïÒ»¶¨ÊýÖµºó£¬½«ÆäÓë±êÖ¾Î»Ò»ÆðÇåÁã¡£
  60          bit raised_fell_once_flag = 0;                  //raised_fell_flagÊÇ·ñÔø¾­±êÖ¾¹ý£¬Èç¹û±êÖ¾¹ýÔòÖÃ1.È»ºóÖ÷»ú±»»Ö¸´µ¹µØ»òÕß»
             -Ö¸´Ì§ÆðÊ±£¬´Ë±êÖ¾Î»¸´Î»¡£
  61          tByte key_rotated_on_flag=1;                    //µç¶¯³µ¿ªÆô±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  62          tByte key_rotated_off_flag=0;                   //µç¶¯³µ¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  63          tWord ADC_check_result = 0;             //×÷ÎªAD¼ì²âÖµ
  64          tByte wire_broken_count = 0;            // ×÷Îª¶ÏÏßºóµÄÊ±¼ä¼ì²â
  65          bit battery_stolen_EN = 0;                      // ×÷Îªµç³Ø±»µÁµÄÊ¹ÄÜ¶Ë
  66          tByte battery_stolen_count = 0; // ×÷Îªµç³Ø±»µÁµÄ±¨¾¯´ÎÊý
  67          bit horizontal_vibration = 0;           // ±íÊ¾´¹Ö±´«¸ÐÆ÷ÔÚÕñ¶¯£¬´ËÊ±¾ÍËã¹ØÔ¿³×£¬Ò²²»ÄÜÖ´ÐÐ¹ØÔ¿³×µÄ²Ù×÷¡
  68          tWord horizontal_vibration_count = 0;   //´¹Ö±´«¸ÐÆ÷´¥·¢ºó£¬¶ÔÊ±¼ä½øÐÐ¼ÆÊý¡£
  69          bit vibration_flag = 0;
  70          tWord vibration_count = 0;
  71          bit wire_broken_flag = 0;                       // ¼ô¶ÏËøÏßµÄ±êÖ¾Î»
  72          tByte IDkey5 = IDkey0^IDkey1^IDkey2^IDkey3^IDkey4;              // ÓÉÇ°5Î»ÃÜÂë×é³ÉµÄÒì»ò
  73          bit IDkey_flag = 0;                     // µ±ID¿¨¿¿½üÊ±ÈÏÖ¤Í¨¹ýºóÖÃ1£¬
  74          tByte IDkey_count = 0;          // ID¿¨ÈÏÖ¤Í¨¹ýºó£¬¼ÆÊ±1·ÖÖÓ£¬Ê¹Ô¿³×ÄÜ×ª¶¯¡£
  75          bit sensor_EN = 0;
  76          tByte enable_sensor_delay_count = 0;            // ´«¸ÐÆ÷ÑÓ³ÙµÄÊ±¼ä
  77          bit sensor_3rdalarm_flag = 0;
  78          bit wheeled_flag = 0;
  79          tWord wheeled_count = 0;
  80          
  81          tByte key_rotate_count = 0;
  82          bit key_rotate_flag = 0;
  83          bit lock_rotate_on_flag = 1;
  84          bit lock_rotate_off_flag = 0;
  85          bit slave_away_flag = 1;
  86          bit Auto_Mode = 1;              //×Ô¶¯¿ª¹ØËøÄ£Ê½´ò¿ª£¬Ã¿´ÎÊÕµ½ComMode_8Ê±£¬ÊÖ¶¯ºÍ×Ô¶¯ÇÐ»»
  87          
  88          void main()
  89                  {
  90   1      
  91   1      /*      InitUART();
  92   1              InitT0(1);
  93   1              
  94   1              TI = 0;
  95   1              RI = 0;
  96   1              ES = 1;
  97   1              ET0 = 1;
  98   1              PS = 1;
  99   1              EA = 1;
 100   1      */
 101   1              
 102   1              InitTimer(1,100);
 103   1      
 104   1              sensor_EN = 0;
 105   1              position_sensor_EN = 0;
 106   1      
 107   1              noVoice();
 108   1      
 109   1              voice_EN=0;             //½«¹¦·Å¹Ø±Õ
 110   1      
 111   1              raised_sensor_detect=1;
C51 COMPILER V9.51   MAIN                                                                  09/04/2014 10:05:25 PAGE 3   

 112   1              fell_sensor_detect=1;
 113   1      
 114   1              P10=1;
 115   1              
 116   1          horizontal_sensor = 1;
 117   1              
 118   1              ComMode_Data(ComMode_8, 28);
 119   1      
 120   1              // turn off transmitter, turn on receiver
 121   1              transmiter_EN = 1;
 122   1              receiver_EN = 0;
 123   1              
 124   1              // initialize the magnet, 
 125   1              MagentControl_1 = 1;
 126   1              MagentControl_2 = 1;
 127   1      
 128   1              transmiter_power = 1; 
 129   1         
 130   1              wire_broken = 1;
 131   1              TR0 = 1;
 132   1              
 133   1              // lock the external motor, ·ÀÖ¹Ëø»¹Ã»ÍêÈ«´ò¿ªµÄÊ±ºò£¬³µÊÖ¼Óµçµ¼ÖÂÂÖ×ÓÓëËøµÄ¸æËßÅö×²¡£ 
 134   1              motor_lock = 1;
 135   1              while(1)
 136   1                      {        
 137   2                      
 138   2                      // ÅÐ¶Ï´«¸ÐÆ÷ÊÇ·ñÔÚÕñ¶¯
 139   2                      if((sensor_detect == 0)||(horizontal_sensor == 0))
 140   2                              {
 141   3                              vibration_flag = 1;
 142   3                              vibration_count = 0;                    
 143   3                              }
 144   2                      }
 145   1              }
 146          
 147          /*------------------------------------------------------------------
 148                  timerT0()
 149                  operation every ticket.
 150          --------------------------------------------------------------------*/
 151          
 152          void timer0() interrupt interrupt_timer_0_overflow
 153                  {
 154   1              // manually reload timer0 configuration
 155   1              TH0 = timer0_8H;
 156   1              TL0 = timer0_8L;
 157   1              
 158   1              // timer0 is 1ms ticket, count the time flow of timer0, then operate every 2s.
 159   1              if(++timer0_count >= 2000)
 160   1                      {
 161   2                      // reset timer0 ticket counter every 2s
 162   2                      timer0_count=0;
 163   2      
 164   2                      if(++key_rotate_count < 16)             
 165   2                              {
 166   3                              if((key_rotated_on_flag == 1)||(key_rotated_off_flag == 1))
 167   3                                      {
 168   4                                      ComMode_Data(ComMode_1, 28);                            
 169   4                                      }
 170   3                              }
 171   2                      else
 172   2                              key_rotate_count = 31;
 173   2                              
C51 COMPILER V9.51   MAIN                                                                  09/04/2014 10:05:25 PAGE 4   

 174   2                      if(lock_rotate_off_flag == 0)
 175   2                              {
 176   3                              if(++IDkey_count > 4)
 177   3                                      {
 178   4                                      IDkey_count = 7;
 179   4                                      slave_away_flag = 1;
 180   4                                      }                       
 181   3                              }
 182   2                      // detect the battery voltage
 183   2                      ADC_check_result = GetADCResult(6);     
 184   2                      
 185   2      
 186   2                      // if fell and raised flag is 1, send alarm signal every 2s.
 187   2                      if((fell_flag==1)&&(fell_alarm_count<5))
 188   2                              {
 189   3                              ComMode_Data(ComMode_5, 28);
 190   3                              fell_alarm_count++;
 191   3                              }
 192   2                      if((raised_flag==1)&&(raised_alarm_count<5))            
 193   2                              {
 194   3                              ComMode_Data(ComMode_4, 28);
 195   3                              raised_alarm_count++;
 196   3                              }
 197   2                              
 198   2                      if((battery_stolen_EN == 1)&&(battery_stolen_count < 4)&&(Auto_Mode == 1))
 199   2                              {
 200   3                              if(key_rotate == 0)
 201   3                                      {
 202   4                                      ComMode_Data(ComMode_2, 28);
 203   4                                      battery_stolen_speech();
 204   4                                      battery_stolen_count++;
 205   4                                      }
 206   3                              }
 207   2      /*              
 208   2                      if(IDkey_flag == 1)
 209   2                              {
 210   2                              if(++IDkey_count >= 12)
 211   2                                      {
 212   2                                      IDkey_count = 0;
 213   2                                      IDkey_flag = 0;
 214   2                                      if(key_rotated_off_flag == 1)
 215   2                                              {
 216   2                                              enable_sensor();                                        
 217   2                                              }
 218   2                                      }                       
 219   2                              }
 220   2      */
 221   2                                                                              
 222   2                      if((enable_sensor_delayEN == 1)&&(key_rotate == 0))
 223   2                              {
 224   3                              if(++enable_sensor_delay_count >= 5)
 225   3                                      {
 226   4                                      enable_sensor_delay_count = 0;
 227   4                                      enable_sensor_delayEN = 0;
 228   4                                      enable_sensor();
 229   4                                      }
 230   3                              }
 231   2                                              
 232   2                      // whether host has been touched 3 times, if yes, then alarm 2 speech alternantively.
 233   2                      if((host_stolen_alarm1_EN == 1)&&(host_stolen_alarm1_count < 4))
 234   2                              {
 235   3                              stolen_alarm_flag = 1;
C51 COMPILER V9.51   MAIN                                                                  09/04/2014 10:05:25 PAGE 5   

 236   3                              if(key_rotate == 0)
 237   3                                      {
 238   4                                      if(wire_broken_flag == 0)
 239   4                                              {
 240   5                                              ComMode_Data(ComMode_3, 28);                                                                  
 241   5                                              }
 242   4                                      else
 243   4                                              {                                                                     
 244   5                                              ComMode_Data(ComMode_6, 28);
 245   5                                              }
 246   4                                              
 247   4                                      stolen_alarm_speech1();
 248   4                                      }
 249   3                              if(++host_stolen_alarm1_count >= 4)
 250   3                                      {                                                                                       
 251   4                                      host_stolen_alarm1_count = 0;
 252   4                                      host_stolen_alarm1_EN = 0;
 253   4                                      stolen_alarm_flag = 0;
 254   4                                      sensor_3rdalarm_flag = 0;
 255   4                                      }
 256   3                              }
 257   2                      if((host_stolen_alarm2_EN == 1)&&(host_stolen_alarm2_count < 4))
 258   2                              {
 259   3                              stolen_alarm_flag = 1;
 260   3                              if(key_rotate == 0)
 261   3                                      {
 262   4                                      if(wire_broken_flag == 0)
 263   4                                              {
 264   5                                              ComMode_Data(ComMode_3, 28);
 265   5                                              }
 266   4                                      else
 267   4                                              {
 268   5                                              ComMode_Data(ComMode_6, 28);
 269   5                                              }
 270   4                                      stolen_alarm_speech2();
 271   4                                      }
 272   3                              if(++host_stolen_alarm2_count >= 4)
 273   3                                      {
 274   4                                      host_stolen_alarm2_count = 0;
 275   4                                      host_stolen_alarm2_EN = 0;
 276   4                                      stolen_alarm_flag = 0;
 277   4                                      sensor_3rdalarm_flag = 0;
 278   4                                      }
 279   3                              }                       
 280   2                      }
 281   1              
 282   1              if((key_rotate == 1)&&(key_rotated_on_flag == 0)&&(Auto_Mode == 1))
 283   1                      {               
 284   2                      Delay(5);
 285   2                      if(key_rotate == 1)
 286   2                              {
 287   3                              // ÉèÖÃ¿ªÔ¿³×ºÍ¹ØÔ¿³×µÄ±êÖ¾Î»
 288   3                              key_rotated_on_flag = 1;
 289   3                              key_rotated_off_flag = 0;
 290   3                              lock_rotate_on_flag = 0;
 291   3                              
 292   3                              key_rotate_count = 0;                   
 293   3                              disable_sensor();       
 294   3                              }
 295   2                      }
 296   1                      
 297   1              // detect whether key is rotated on,  
C51 COMPILER V9.51   MAIN                                                                  09/04/2014 10:05:25 PAGE 6   

 298   1              if((key_rotated_on_flag == 1)&&(IDkey_flag == 1)&&(lock_rotate_on_flag == 0)&&(Auto_Mode == 1))         
 299   1                      {                                                                        
 300   2                      magnet_CW(2000, 4000, 28);
 301   2                      
 302   2                      slave_nearby_operation();                     
 303   2                      IDkey_count = 0;
 304   2                      IDkey_flag = 0;
 305   2                      lock_rotate_on_flag = 1;
 306   2                      key_rotate_count = 31;
 307   2                      }
 308   1                      
 309   1              if((key_rotate == 0)&&(key_rotated_off_flag == 0)&&(Auto_Mode == 1))
 310   1                      {
 311   2                      Delay(5);
 312   2                      if(key_rotate == 0)
 313   2                              {
 314   3                              // ÉèÖÃ¿ªÔ¿³×ºÍ¹ØÔ¿³×µÄ±êÖ¾Î»
 315   3                              key_rotated_on_flag = 0;
 316   3                              key_rotated_off_flag = 1;
 317   3                              lock_rotate_off_flag = 0;
 318   3      
 319   3                              key_rotate_count = 10;
 320   3                              }               
 321   2                      }
 322   1      
 323   1              if((key_rotated_off_flag == 1)&&(slave_away_flag == 1)&&(lock_rotate_off_flag == 0)&&(Auto_Mode == 1))
 324   1                      {
 325   2                      if((vibration_flag == 0)&&(wheeled_flag == 0))
 326   2                              {
 327   3                              // handle with battery status
 328   3                              verifybattery(ADC_check_result);
 329   3                              magnet_ACW(6000, 10000);                        
 330   3                              
 331   3                              // reset key rotation flag
 332   3                              slave_away_operation();
 333   3                              
 334   3                              key_rotate_count = 31;
 335   3                              slave_away_flag = 0;
 336   3                              lock_rotate_off_flag = 1;
 337   3                              IDkey_flag = 0;
 338   3                              }
 339   2                      }
 340   1              
 341   1              if((sensor_detect == 0)||(horizontal_sensor == 0))
 342   1                      {
 343   2                      vibration_flag = 1;
 344   2                      vibration_count = 0;
 345   2                      }               
 346   1              if(vibration_flag == 1)
 347   1                      {
 348   2                      if(++vibration_count > 2000)
 349   2                              {
 350   3                              vibration_flag = 0;
 351   3                              vibration_count = 0;
 352   3                              }
 353   2                      }               
 354   1              
 355   1              if(wheeled_rotate == 1)
 356   1                      {
 357   2                      wheeled_flag = 1;
 358   2                      wheeled_count = 0;
 359   2                      }
C51 COMPILER V9.51   MAIN                                                                  09/04/2014 10:05:25 PAGE 7   

 360   1              if(wheeled_flag == 1)
 361   1                      {
 362   2                      if(++wheeled_count >= 2000)
 363   2                              {
 364   3                              wheeled_flag = 0;
 365   3                              wheeled_count = 0;
 366   3                  }
 367   2                      }
 368   1      
 369   1      
 370   1              // judge host is fell or raised every 1ms?
 371   1              if((raised_sensor_detect == 1)&&(fell_sensor_detect == 1))
 372   1                      {
 373   2                      // judge vibration sensor is enable?
 374   2                      if(sensor_EN == 1)      
 375   2                              {                       
 376   3                              // sensor trigger status, 0, 1 or 2?
 377   3                              switch(sensor_trigger_count)
 378   3                                      {
 379   4                                      // case 0, it means host is in waiting status. waiting for first touch.
 380   4                                      case 0:
 381   4                                              {                                       
 382   5                                              // judge host been touched and also not in vibration alarm
 383   5                                              if(((sensor_detect == 0)||(horizontal_sensor == 0))&&(stolen_alarm_flag == 0))          
 384   5                                                      {
 385   6                                                      // judge LV is more than 2ms, if yes, it means a effective touch
 386   6                                                      if(++sensor_1ststage_count >= 2)                        
 387   6                                                              {
 388   7                                                              sensor_1ststage_count=0;
 389   7                                                              
 390   7                                                              // sensor trigge status progress to case 1.
 391   7                                                              sensor_trigger_count = 1;
 392   7                                                              // alarm speech for first touoch
 393   7                                                              host_touch_speech();
 394   7                                                              }
 395   6                                                      }
 396   5                                              else
 397   5                                                      {
 398   6                                                      // if no LV, reset the count.
 399   6                                                      sensor_1ststage_count = 0;
 400   6                                                      }
 401   5                                              }
 402   4                                      break;
 403   4                                      
 404   4                                      // waiting for next touch, 
 405   4                                      case 1:
 406   4                                              {
 407   5      //                                      if((sensor_detect == 0)||(horizontal_sensor == 0))
 408   5                                              if((sensor_detect == 0)||(horizontal_sensor == 0))
 409   5                                                      {
 410   6                                                      // LV for 2s, means a effective touch             
 411   6                                                      if(++sensor_2ndstage_count >= 2)
 412   6                                                              {
 413   7                                                              sensor_2ndstage_count = 0;
 414   7                                                              sensor_trigger_count = 2;
 415   7                                                              // alarm speech for 2nd touch
 416   7                                                              host_2ndtouch_speech();
 417   7                                                              }
 418   6                                                      }
 419   5                                              else
 420   5                                                      {
 421   6                                                      sensor_2ndstage_count = 0;
C51 COMPILER V9.51   MAIN                                                                  09/04/2014 10:05:25 PAGE 8   

 422   6                                                      }
 423   5                                              
 424   5                                              // if there is no touch in 4s, reset sensor trigger status, etc.
 425   5                                              if(++sensor_2ndstage_time >= 4000)
 426   5                                                      {
 427   6                                                      sensor_trigger_count = 0;
 428   6                                                      sensor_2ndstage_count = 0;
 429   6                                                      sensor_1ststage_count = 0;
 430   6                                                      sensor_2ndstage_time = 0;
 431   6                                                      }
 432   5                                              }
 433   4                                      break;
 434   4                                      
 435   4                                      // waiting for 3rd touch
 436   4                                      case 2:
 437   4                                              {
 438   5                                              if((sensor_detect == 0)||(horizontal_sensor == 0))
 439   5                                                      {
 440   6                                                      // 2s LV is a effective touch
 441   6                                                      if(++sensor_3rdstage_count >= 1)
 442   6                                                              {
 443   7                                                              sensor_3rdstage_count = 0;
 444   7                                                              // stolen alarm speech enable
 445   7                                                              host_stolen_alarm1_EN = 1;
 446   7                                                              host_stolen_alarm2_EN = 1;                                              
 447   7                                                              sensor_3rdalarm_flag = 1;                                                       
 448   7                                                              }
 449   6                                                      }
 450   5                                              else
 451   5                                                      {
 452   6                                                      sensor_3rdstage_count = 0;
 453   6                                                      }
 454   5                                              
 455   5                                              // if there is no touch in 4s, reset all.
 456   5                                              if(++sensor_3rdstage_time >= 4000)
 457   5                                                      {
 458   6                                                      sensor_trigger_count = 0;
 459   6                                                      sensor_1ststage_count = 0;
 460   6                                                      sensor_2ndstage_count = 0;
 461   6                                                      sensor_2ndstage_time = 0;
 462   6                                                      sensor_3rdstage_time = 0;
 463   6                                                      sensor_3rdstage_interval = 800;
 464   6                                                      sensor_3rdstage_count = 0;
 465   6                                                      sensor_3rdstage_effcount = 0;                                   
 466   6                                                      }
 467   5                                              }
 468   4                                      break;
 469   4                                      }
 470   3                              
 471   3                              // judge the wire broken, if yes, it means someone has cut the wire of magnet lock
 472   3                              if((wire_broken == 0) && (wire_broken_count < 51))  
 473   3                                      {
 474   4                                      if(++wire_broken_count > 50)
 475   4                                              {
 476   5                                              host_stolen_alarm1_EN = 1;
 477   5                                              host_stolen_alarm2_EN = 1;      
 478   5                                              wire_broken_count = 51;
 479   5                                              wire_broken_flag = 1;
 480   5                                              }
 481   4                                      }
 482   3                              else if((wire_broken == 1)&&(sensor_3rdalarm_flag == 0))
 483   3                                      {
C51 COMPILER V9.51   MAIN                                                                  09/04/2014 10:05:25 PAGE 9   

 484   4                                      wire_broken_count = 0;
 485   4                                      host_stolen_alarm1_EN = 0;
 486   4                                      host_stolen_alarm2_EN = 0;
 487   4                                      }
 488   3                              
 489   3                              // judge whether battery has been stolen, 0.4V/4V
 490   3                              if(ADC_check_result < 0x100)
 491   3                                      {
 492   4                                      battery_stolen_EN = 1;
 493   4                                      }
 494   3                              else if(ADC_check_result > 0x100)
 495   3                                      {
 496   4                                      battery_stolen_EN = 0;
 497   4                                      battery_stolen_count = 0;
 498   4                                      }                       
 499   3                              }
 500   2                      }
 501   1              
 502   1              // judge whether position sensor is enable
 503   1              if(position_sensor_EN==1)               
 504   1                      {
 505   2                      // judge whether there is a LV
 506   2                      if(raised_sensor_detect == 0)   
 507   2                              {
 508   3                              // LV > 0.5s means a effective input
 509   3                              if(++raise_wire_time >= 3)
 510   3                                      {
 511   4                                      // flag raised, and reset fell
 512   4                                      raised_flag=1;
 513   4                                      fell_flag=0;
 514   4                                      raise_wire_time = 11;
 515   4                                      // judge whether there once been a raised or fell.
 516   4                                      if(raised_fell_once_flag == 0)
 517   4                                              {
 518   5                                              // if no, flag raised and fell flag
 519   5                                              raised_fell_flag = 1;                                   
 520   5                                              }
 521   4                                      }               
 522   3                              }
 523   2                      else
 524   2                              {
 525   3                              raised_flag=0;
 526   3                              raised_alarm_count=0;
 527   3                              raise_wire_time=0;
 528   3                              raised_fell_flag = 0;
 529   3                              }
 530   2            // judge whether there is a LV
 531   2                      if(fell_sensor_detect==0)
 532   2                              {
 533   3                              // LV > 0.5s means a effective input
 534   3                              if(++fell_wire_time >= 3)       
 535   3                                      {
 536   4                                      // flag fell, and reset raised
 537   4                                      fell_flag=1;                    
 538   4                                      raised_flag=0;
 539   4                                      fell_wire_time = 11;
 540   4                                      // judge whether there once been a raised or fell
 541   4                                      if(raised_fell_once_flag == 0)
 542   4                                              {
 543   5                                              raised_fell_flag = 1;                                   
 544   5                                              }
 545   4                                      }               
C51 COMPILER V9.51   MAIN                                                                  09/04/2014 10:05:25 PAGE 10  

 546   3                              }
 547   2                      else
 548   2                              {
 549   3                              fell_flag=0;
 550   3                              fell_alarm_count=0;
 551   3                              fell_wire_time=0;
 552   3                              raised_fell_flag = 0;
 553   3                              }
 554   2                      }
 555   1              
 556   1              // judge whether raised or fell, if yes, reset all after 10s.
 557   1              if(raised_fell_flag == 1)
 558   1                      {
 559   2                      if(++raised_fell_number >= 4000)
 560   2                              {
 561   3                              raised_fell_flag = 0;
 562   3                              raised_fell_number = 0;
 563   3                              raised_fell_once_flag = 1;
 564   3                              
 565   3                              sensor_trigger_count = 0;
 566   3                              sensor_1ststage_count = 0;
 567   3                              sensor_2ndstage_count = 0;
 568   3                              sensor_2ndstage_time = 0;
 569   3                              sensor_3rdstage_time = 0;
 570   3                              sensor_3rdstage_interval = 800;
 571   3                              sensor_3rdstage_count = 0;
 572   3                              sensor_3rdstage_effcount = 0;                                   
 573   3                              }
 574   2                      }
 575   1                      
 576   1              // detect the horizontal sensor
 577   1              if(((horizontal_sensor == 0)||(sensor_detect == 0))&&(horizontal_vibration_count > 5000))
 578   1                      {
 579   2                      Delay(3);
 580   2                      if((horizontal_sensor == 0)||(sensor_detect == 0))
 581   2                              {
 582   3                              horizontal_vibration = 1;
 583   3                              horizontal_vibration_count = 0;
 584   3                              }
 585   2                      }
 586   1              if(++horizontal_vibration_count >= 5000)
 587   1                      {
 588   2                      horizontal_vibration_count = 5001;
 589   2                      horizontal_vibration = 0;
 590   2                      }
 591   1              }
 592          
 593          /*-----------------------------------------------
 594                  ÓÃUART¶Ë¿Ú½ÓÊÕÊý¾Ý£¬9600²¨ÌØÂÊ£¬ÊÕµ½ºó±íÊ¾
 595                  ÈÏÖ¤ÒÑÍ¨¹ý¡£
 596          void uart_isr() interrupt 4 //ÖÐ¶Ï½ÓÊÕÊý¾Ý
 597                  {
 598                  if(RI)
 599                          {
 600                          RI=0;
 601          
 602                          // assign one byte to buffer[i] 
 603                          received_data_buffer[data_count] = SBUF;
 604                          
 605                          // judge whether buffer[0] is CmdHead
 606                          if((data_count == 0) && (received_data_buffer[0] == IDkey0))
 607                                  {
C51 COMPILER V9.51   MAIN                                                                  09/04/2014 10:05:25 PAGE 11  

 608                                  data_count = 1;
 609                                  }
 610                          else if((data_count == 1) && (received_data_buffer[1] == IDkey1))
 611                                  {
 612                                  data_count = 2;
 613                                  }
 614                          else if((data_count == 2) && (received_data_buffer[2] == IDkey2))
 615                                  {
 616                                  data_count = 3;
 617                                  }
 618                          else if((data_count == 3) && (received_data_buffer[3] == IDkey3))
 619                                  {
 620                                  data_count = 4;
 621                                  }
 622                          else if((data_count == 4) && (received_data_buffer[4] == IDkey4))
 623                                  {
 624                                  data_count = 5;
 625                                  }
 626                          else if((data_count == 5) && (received_data_buffer[5] == IDkey5))
 627                                  {
 628                                  data_count = 0; 
 629                                  IDkey_flag = 1;
 630                                  IDkey_count = 0;
 631                                  disable_sensor();
 632                                  }
 633                          else 
 634                                  {
 635                                  data_count = 0;
 636                                  }
 637                          }
 638                  }
 639          -----------------------------------------------*/
 640          
 641          /*--------------------------------------------------------------------
 642                  timerT1()
 643                  ¶¨Ê±Æ÷1Ã¿´ÎÒç³öºóÖ´ÐÐµÄ²Ù×÷£¬µÍËÙÂÊÄ£Ê½½ÓÊÕ
 644                  Êý¾Ý¡£
 645          --------------------------------------------------------------------*/
 646          
 647          void timerT1() interrupt interrupt_timer_1_overflow
 648                  {
 649   1         // reload timer1
 650   1              TH1 = timer1_8H;                                
 651   1              TL1 = timer1_8L;
 652   1              
 653   1              // receive a tyte
 654   1              receive_byte();
 655   1              
 656   1              // receive a word after every byte
 657   1              receive_word();
 658   1              
 659   1              // judge whether a byte has received successfully
 660   1              if(receive_data_finished_flag == 1)
 661   1                      {
 662   2                      receive_data_finished_flag = 0;
 663   2                      // judge which mode is received.
 664   2                      switch(received_data_buffer[2])                 
 665   2                              {
 666   3                              case ComMode_1:  
 667   3                                      {
 668   4                                      IDkey_flag = 1;
 669   4                                      IDkey_count = 0;
C51 COMPILER V9.51   MAIN                                                                  09/04/2014 10:05:25 PAGE 12  

 670   4                                      disable_sensor();
 671   4                                      }
 672   3                              break;
 673   3                              
 674   3                              case ComMode_7:
 675   3                                      {
 676   4                                      if(Auto_Mode == 0)
 677   4                                              {
 678   5                                              if((motor_lock == 0)&&(vibration_flag == 0)&&(wheeled_flag == 0))
 679   5                                                      {
 680   6                                                      if(battery_stolen_EN == 1)
 681   6                                                              {
 682   7                                                              magnet_ACW(6000, 20000);                                                        
 683   7                                                              }
 684   6                                                      else
 685   6                                                              magnet_ACW(6000, 10000);
 686   6                                                      enable_sensor_delayEN = 1;
 687   6                                                      ComMode_Data(ComMode_9, 42);                                                                            
 688   6                                                      }
 689   5                                              else if(motor_lock == 1)
 690   5                                                      {
 691   6                                                      if(battery_stolen_EN == 1)
 692   6                                                              {
 693   7                                                              magnet_CW(2000, 5000, 42);                                                      
 694   7                                                              }
 695   6                                                      else
 696   6                                                              magnet_CW(2000, 4000, 42);
 697   6                                                      enable_sensor_delayEN = 0;
 698   6                                                      disable_sensor();
 699   6                                                      ComMode_Data(ComMode_7, 42);
 700   6                                                      }                                       
 701   5                                              }
 702   4                                      }
 703   3                              break;
 704   3                              
 705   3                              case ComMode_8:
 706   3                                      {
 707   4                                      if(Auto_Mode == 0)
 708   4                                              {
 709   5                                              ComMode_Data(ComMode_8, 42);                            
 710   5                                              Auto_Mode = 1;
 711   5                                              slave_away_flag = 1;
 712   5                                              key_rotated_off_flag = 0;
 713   5                                              }
 714   4                                      else
 715   4                                              {
 716   5                                              ComMode_Data(ComMode_10, 42);                           
 717   5                                              Auto_Mode = 0;                                  
 718   5                                              }
 719   4                                      }
 720   3                              break;                  
 721   3                              }
 722   2                      }
 723   1              }
 724          
 725          
 726          /*---------------------------------------------------
 727                  end of file
 728          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.51   MAIN                                                                  09/04/2014 10:05:25 PAGE 13  

   CODE SIZE        =   1339    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     50    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     23    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
